## project_learning - elice 0419 ##

# Git
    git?
        오늘날 가장 많이 사용하는 버전 관리 시스템

    버전이 만들어 지는 3단계
        Working directory :
            내가 코드를 작성하는 공간 => 코드를 생성, 수정, 삭제되는 공간

        Staging Area :
            버전이 될 코드가 존재하는 공간 => Working directory에서 버전으로 만들고 싶은 파일들을 저장하는 공간

        Repository :
            버전이 저장되어 있는 공간

    README.md
        프로젝트 코드의 구성, 아키텍쳐 등의 프로젝트 내용을 정리하는 문서

        git init : 버전 관리를 시작하겠다고 선언 / Working directory

        git status : 현재 버전 관리가 되는 폴더의 현 상황

        git add . : 생성한 모든 파일의 변경 사항을 Staging Area에 업로드
        git add 생성한파일명 : 생성한파일의 변경 사항을 Staging Area에 업로드

        git commit -m "init" : 저장소에 내 파일들을 "init"이라는 이름의 버전으로 저장 

        git log : 더미널에 내가 작성한 버전 정보들이 출력된다.

    여기까지는 내 local 저장소에 저장

    원격 저장소
        Github : 가장 큰 개발자 커뮤니티이자 오픈 소스 프로젝트를 찾아볼 수 있는 원격 저장소
            private Repository 활용을 하려면 유료로 이용해야함.

        GitLab : private Repository를 무료로 제공
                 CI/CD 파이프라인 도구 활용
                 자체 호스팅하여 데이터 보안을 강화할 수 있음
                 이슈 트래커를 활용하여 이슈를 체계적으로 관리

    나의 로컬 저장소의 파일을 원격 저장소에 저장할 때
        git remote -v : 연결된 원격저장소의 정보

        git remote add origin https://kdt-gitlab.elice.io/ghwns5087/git-gitlab.git : 로컬 저장소와 원격 저장소를 연결

        git push origin master : 로컬 저장소에 있는 내용을 원격 저장소에 밀어 넣음
            -> ID & PassWord 입력 하면 원격 저장소에 업로드

    다른 사람들이 업로드한 파일을 나의 로컬 저장소에 끌고 올 때
        git pull origin master : 원격 저장소에 있는 내용을 로컬 저장소로 끌고 옴
            -> ID & PassWord 입력 하면 로컬 저장소로 업로드됨

    
    개발자 협업 방식
        .gitignore, Git Flow, MR, commit

        .gitignore : 특정 파일이나 디렉터리를 버전 관리 대상에서 제외하는 기능

        Git Flow : Git Branch 전략
            Branch를 크게 3~4가지로 나눠 개발하는 버전 관리

        git branch 브랜치명 : 새로운 브랜치 생성

        git checkout develop : develop 브랜치로 이동

        메인 Branch는 master와 develop 두 종류를 말한다.
            master : 배포 가능한 상태만을 관리하는 Branch
            develop : 다음 배포할 것을 개발하는 Branch

        보조 Branch
            feature : 기능을 개발하는 Branch

        릴리즈 Branch
            Release : 최종적인 버그 수정 등의 개발을 수행하는 Branch

        핫픽스 Branch
            Hotfix : 긴급하게 수정할 필요가 있을 때 master에서 분라히는 Branch

    원격 저장소에 새로운 브랜치를 생성하는 방법
        git push origin develop : 원격 저장소에 develop Branch가 추가된다

        develop 브랜치 상태에서
        git branch feature/1을 생성하여 접속하여 원격 저장소에 추가

    MR(merge request)

        우선 feature/1 브랜치에서 파일을 수정하여 원격 저장소로 저장한다.
        Git Lab에서 merge request로 접속
        target 과 source을 확인
            title에는 변경사항 간략히 서술
            Description에는 변경사항 자세히 서술
            Request를 눌러 작업자의 히스토리와 변경사항을 확인 할 수 있음
            변경사항에는 의견을 남길 수 있음
            Merge 버튼을 누르면 develop 브랜치와 병합 후 feature/1은 삭제됨

        Commit 컨벤션을 지키면서 활용
        
    충돌 상황
        로컬 저장소에서 변경된 내용을 pull하지 않고 로컬 저장소에서 변경하고 push한 상태에서
        오류가 발생한다. 
            이때, git pull origin develop을 작성하고 오류 내용을 지운 다음 다시 작성하고자 하는 내용을 add . / commit 하여 해결한다.

    이슈 만들기
        Gitlab에서 해결해야 할 일을 의미로 작성한다.
        
    라벨 : 이슈를 가독성 좋게 만들 수 있다.

    마일스톤 : 이슈를 모아서 관리하는 역할을 하며 기한을 설정하는 기능이 존재한다.




    


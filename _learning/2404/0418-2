## spring_learning - CT 0418 ##

# 코딩 테스트 필수 문법 & 지식

    앱실론
        표현 과정에서 오차가 발생하는 것 ex. 0.1 + 0.2 != 0.3

    컬렉션 프레임워크
        표준화 클래스의 집합
            대표적인 컬렉션 프레임워크 : ArrayList / Stack / Queue / ArrayDeque / HashMap
        
    배열 : 저장할 데이터의 개수가 정해져 있을 때 사용하기 유용
    ex. Arrays.toString(배열이름) => //출력 [배열요소1,베열요소2] 

        배열의 인덱스 : 원소 위치에 빠르게 접근하기 위한 기능
            배열은 생성 이후에는 배열의 크기를 변경할 수 없다.
                => 새 데이터를 삽입하거나 삭제하는 것은 불가능하고, 기존 데이터의 변경만 가능하다.
                    ex. 배열이름[2] //배열의 3번째 값으로 접근

    리스트 : 배열과 가장 큰 차이는 리스트는 가변 크기로 새 데이터의 삽입 혹은 기존 데이터의 삭제를 할 수 있다.
        ex. 리스트객체.add(1); // 리스트객체안에 데이터 1을 추가
            리스트객체.get(2); // 리스트객체안의 인덱스 값 2를 가진 데이터에 접근
            리스트객체 // 리스트데이터 출력 

    해시맵 : 키와 값을 쌍으로 저장하는 해시 테이블로 구현
        키를 사용하여 값을 검색하는 자료구조
            ex. map.put("apple", 1); //해시맵의 키로 "apple", 값으로는 1을 삽입

        해시맵의 데이터 검색
            ex. if(map.containsKey(key)){int value = map.get(key)} 
            //map안에 key에 담긴 값과 동일한 key가 있으면 해당 키의 value값을 찾을 수 있음

        해시맵 수정 : 해당 키를 검색하여 값을 변경함
            ex. map.put("apple", 2); // "apple"의 value가 2로 변경됨

        해시맵 삭제 : 해당 키를 찾아 해시맵에서 삭제
            ex. map.remove("apple"); // "apple"를 키로하는 데이터 쌍 삭제

    문자열 : 문자들을 배열의 형태로 구성하는 객체

        문자열 초기화 : 문자열은 ""로 감싸 사용
        
        문자열 추가,삭제 : 추가되는 과정에서 기존 객체를 수정하는 것이 아닌 새로운 객체를 반환
            ex. String A = "he";
                A += "llo";
                //출력 "hello"

        문자열 수정 
            ex. A = A.replace("l","");
                //출력 "heo"

        StringBuilder & StringBuffer 클래스 : 시간 복잡도 관점에서 효율적으로 문제 해결
            ex. StringBuilder sb = new StringBuilder();

                sb.append(10);
                sb.append("abc");
                // 10abc
                
                sb.deleteCharAt(3);
                // 10ac

                sb.insert(1,2);
                // 120ac

    메서드 : 클래스 내부에 정의한 함수

        메서드 호출 : 메서드 명을 호출, 매개변수가 있을 경우 함께 호출

    람다식 : 익명 함수 => 이름 없는 함수

# 코딩 테스트 코드 구현 tip

    조기 반환 : 함수가 끝까지 도달하기 전에 반환하는 기법
        매개변수를 활용하여 결과 값으로 출력할 값을 미리 계산하여 조건에 맞게 처리하여 예외에 대한 처리를 하지 않는 기법

    보호 구문 : 로직을 진행하기 전에 미리 예외 처리 조건 코드를 추가해놓는 기법

    제네릭 : 타입을 체크하여 안정성을 제공하고, 타입 체크와 형변환을 생략할 수 있다.
        타입을 강제하여 타입과 맞지 않는 데이터를 추가 시 문법 오류를 발생시킴

# 배열
    배열은 인덱스와 값을 일대일 대응해 관리하는 자료구조이다.
    어떤 위치에 있는 데이터든 한 번에 접근할 수 있다
        => 이러한 접근 방식을 임의 접근(rendom access)이라한다

    배열 선언
        int[] arr = new int[6];
        위와 같이 생성 시 기본값으로는 0을 가지고 있다.
        인덱스는 0부터 시작되며 원하는 데이터 n번째에 접근 하려면 arr[n-1]와 같이 접근해야한다.
        

    배열과 차원
        1차원 배열 : 기본적인 배열의 형태

        2차원 배열
            int[][] arr2 = {{1,2,3},{4,5,6}};
            행과 열을 명시해 []연산자를 2개 연이어 사용한다는 점만 1차원 배열과 다르다

    배열의 길이 : .length
    배열의 정렬 : .sort()


# ArrayList
    리스트는 자바에서 크기가 동적으로 변경되는 배열이 필요할 때 사용한다.

    데이터 추가 : .add()

    다른 컬렉샨의 데이터로부터 초기화
        생성한 데이터 객체a를 다른 컬렉션 객체b의 매개변수로 사용하면 b의 초기화 값은 a와 동일하다

    데이터 접근 : .get()

    데이터 삭제 : .remove()

    데이터 정렬 : .sort()

    
        




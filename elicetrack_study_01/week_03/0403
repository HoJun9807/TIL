## elice cloudtrack - 0403 ##

# 홈페이지 동작 원리
    사용자에게 프로그램이 홈페이지 요청을 받으면 동작을하고 다시 사용자에게 응답
        1. 요청 확인, 이동, 처리하고
        2. 필요 시 데이터베이스
        3. 페이지 반환
    
# MVC
    사용자가 요청한 view 와 model들의 상호 간 흐름을 control 하는 것을 각각 분리히여 재사용,
    확장이 가능한 구조적 패턴
        model : 상태 정보 처리
        view : 사용자가 보는 화면
        controller : 사용자의 입력 및 흐름을 제어

        사용자가 controller에 요청 -> controller는 model을 통해 사용자의 요청을 처리
        -> controller는 사용자에게 보여줄 view를 선택하고, 사용자는 view를 보게 된다.

        비즈니스 로직을 처리하는 model, 결과를 보여주는 view, 애플리케이션의 흐름 제어 및 사용자 요청 처리하는
        Controller에 집중 => 유지 보수 및 확장을 쉽고 편리하게 할 수 있음.

# 웹 서버 배포
    Tomcat --> War 파일 생성 --> Deploy or Tomcat 실행


# Spring JDBC
    - Entity : 실제 데이터베이스 테이블과 매핑시키는 클래스 / @Entity
    - DTO : 데이터 전송 객체 / 뷰에서 컨트롤러로 넘어오는 데이터를 담거나 컨트롤러와 서비스 사이에서 주고 받는 
    데이터를 담는데 사용
    - DAO : 데이터베이스에 접근하기 위한 객체 / 서비스와 데이터베이스를 연결하기 위한 중간 다리 역할
    - Repositoy : 데이터베이스에 접근하는 메소드를 사용하기 위한 인터페이스 / 서비스와 데이터베이스 사이의 중간 다리
    역할 / CRUD 정의하는 영역 / DAO의 역할

    - JDBC?
        서버와 DB연결 된 상황에서 DB교체가 발생한다면 데이터베이스 변경에 매우 취약하다는 문제가 있다.
        해당 문제를 해결하기 위한 방식이 자바 표준 JDBC 이다.
        
        자바에서 DB 프로그래밍을 하기 위해 사용되는 API

        Entity 생성
        ex.
            @Entity
            @Table(name = "post")
            public class Post {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
                private String title;
            }
            Post 테이블을 그래도 Entity로 생성(getter/setter 필요)
            @Table은 매필할 테이블을 지정 => post
            @id 기본키(PK)
            @GeneratedValue(strategy = GenerationType.IDENTITY) 아이디 생성 전략을 DB에게 위임

    
    - JdbcTemplate
            JDBC API의 단점 : 반복되는 코드 / 연결부터 자원의 반납까지 모든 부분의 관리 / 예외 처리 작성
        
        JdbcTemplate의 장점
            반복해결 : 내부적으로 처리해줌 
            Transaction 처리 : 어노테이션으로 처리
            자바 객체로 매핑 : query문을 실행 후 바로 맵퍼로 받은 후 객체를 생성하고 리스트에 담아서 반환

        JdbcTemplate을 이용하여 게시글 저장 
            insert/update/delete는 update() 메소드를 사용하여 쿼리 실행으로 변경된 행의 개수를 반환

        - 조회
            sql 객체 생성 후 return에 jdbcTemplate.query를 실행하고 sql, (rs, rowNum) 맵핑 -> 
            { 객체 생성 후 객체에 rs에서 받아온get 값을 저장set한다 } 이후 return 객체를 통하여 List<객체>
            로 반환

        ex.
            public Optional<Post> findById(Long id) {
                String sql = "select * from post where id = ?";
                return jdbcTemplate.query(sql, postRowMapper(), id).stream().findAny();
            }
            리턴값이 옵셔널인 이유 : null safe
            .stream().findAny() : 결과값 리턴을 의미

        ex. 입력
            public Post save(Post post) {
                String sql = "insert into post(title, content) values(?, ?)";

                KeyHolder keyHolder = new GeneratedKeyHolder();

                jdbcTemplate.update(connection -> {
                    PreparedStatement ps = connection.prepareStatement(sql, new String[]{"id"});
                    ps.setString(1, post.getTitle());
                    ps.setString(2, post.getContent());
                    return ps;
                }, keyHolder);
                
                
                long postId = keyHolder.getKey().longValue();
                post.setId(postId);
                return post;
            }
            keyHolder : insert 시 자동으로 증가되는 key를 얻고 싶을 때 사용
            connection : JDBC의 일부인 데이터베이스 연결 객체 / 데이터베이스와의 연결을 나타냄
            PreparedStatement : SQL 쿼리를 실행하기 위한 준비된 statement
            post.setId(postId) : 게시물 객체에 검색된 키를 설정하여 게시물의 ID를 설정
            new String[]{"id"} : 문자열 배열을 생성하고, id를 포함시켜 해당 id값은 key값으로 사용된다.

        ex. 수정
        public int update(Post post) {
            String sql = "update post set title =?, content =? where id = ?";
            int result = jdbcTemplate.update(sql, post.getTitle(), post.getContent(), post.getId());
            return result;
        }
        sql을 실행하고 post객체 안에 있는 값을 받아온다.

        ex. 삭제
        public void deleteById(Long id) {
            String sql =  "delete from post where id = ?";
            jdbcTemplate.update(sql, id);
        }
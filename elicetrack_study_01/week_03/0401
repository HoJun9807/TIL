## elice cloudtrack - 0401 ##

# 계층형 아키텍처 패턴
    Spring Boot Application

    클라이언트 ---> Presentaion Layer @Controller
              ---> Application Layer @Service
              ---> Data Access Layer @Repositoy   ---> Database

# Spring Controller
    Presentaion Layer => Client의 요청을 받고 Application Layer에게 요청에 대한 처리 위임
                      => Client에 최종 응답을 하는 역할 
                        - view : 응답의 결과로 보게 되는 웹 페이지
                        - data : 요청에 대한 응답으로 받는 데이터

    기본 Annotation
        @Controller & @RestController : Controller 역할을 하는 클래스를 지정, 클래스 상단에 명시
        
        @RequestMapping : 특정 Request를 처리하는 메소드를 지정, 클래스 또는 메소드 상단에 명시


    Annotation?
        @으로 시작하며 클래스, 메소드, 멤버변수, 파라미터 등에 부착 가능
        1. 자바 컴파일러에게 정보를 제공
        2. SW 툴에 의해 사용되어 코드 생성이나 추가 적업을 진행
        3. Run-time 시 특정 동작을 추가적으로 실행  

     @Controller vs @RestController
        - 대부분의 동작은 유사 => 요청을 받아서 처리하고 응답
        but. 응답하는 형태가 다름
            Controller: view를 응답(html파일 등)
                templates에 있는 html파일을 화면에 띄운다.
            RestController : data를 응답(문자열, Json, xml 등)
                사용자는 메소드가 반환하는 데이터를 자체를 응답으로 받게 된다.
        
# @RequestMapping & URI
    - @RequestMapping
        Client의 특정 요청이 왔을 때 Spring Framework에 의해 호출 된다.

    - URI : 특정한 자원에 접근하기 위한 이름 또는 주소

    Spring Controller의 메소드들은 URI에 따라 호풀이 결정된다
    도메인에 이어지는 '/path'들에 의해 결정
    @RequestMapping(value="/")

# HTTP API
    @RestController 클래스 내의 @RequestMapping이 붙은 개별 메소드들이 각각 하나의 REST API이다.

# Request 파라미터
    Client가 Server에 요청(Request)를 할 때 추가적으로 전송하는 데이터

    2가지 유형
        - Query String
        - Path Parameter

    Spring Framework는 Request 파라미터를 메소드(@RequestMapping)의 파라미터에 저장

    - Query String : URI와 파라미터의 영역을 구분하여 사용
                     key가 파라미터의 이름, value가 파라미터의 값
                     정렬이나 추가 필터링
                     선택적 데이터
        메소드 파라미터에 @RequestParam을 사용 생략가능
        ex. localhost:8080/post?Categoty=it&Id=10
            @RequestMapping(value = "/post")
            public String getPost(@RequestParam(name = "Categoty") String categoty,
                                  @RequestParam(name = "Id") Integer id){
                return "You requested" + categoty + "-" + id + " post";
            }
            // You requested it-10 post

        @RequestParam의 요소들
            - name : query string의 key / 변수명과 같을 경우 생략 가능
            - required : 필수 여부(true or false)
            - defaultValue : 데이터가 없을 경우 기본 값

    - Path Parameter : URI의 일부로 파라미터 값을 사용
                       @RequestMapping value URI에 {}로 Path Param임을 표시
                       특정 자원을 요청하는 경우 
                       필수 데이터
        메소드 파라미터에 @PathVariable을 사용 생략 불가능
        선택적 테이터의 경우 Path Param을 잘 사용하지 않음
        ex. localhost:8080/post?user/admin/id/100
            @RequestMapping(value = "user/{type}/id/{id}")
            public String getUser(@PathVariable(name = "type") String type,
                                  @PathVariable(name = "id") Integer id){
                return "You requested" + type + "-" + id + " user";
            }
            // You requested admin-100 user

    
# Response 데이터와 JSON 포멧
    RestController의 응답 - 객체
        신규 클래스를 생성(Dto) --> 모든 멤버 변수 초기화 하는 생성자 추가 & getter 메소드 추가
        --> Controller에서 Dto클래스형을 반환(return)하는 메소드가 new 객체(Dto생성자)를 생성
        --> 객체를 반환하면 JSON 형식의 데이터가 응답 된다.

    JSON : 웹 개발 시 가장 일반적으로 사용하는 응답 데이터 포멧
           Key:Value 형식이며, 객체와 배열 등의 표현도 가능
        


            


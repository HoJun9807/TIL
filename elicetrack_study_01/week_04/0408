## elice cloudtrack - 0408 ##

# Java Collection
    - 데이터 구조 : LinkedList / Hashtable / Tree
    - 집합 인터페이스 : list, set, queue, map

    - List Interface : 어느 위치에 어떤 객체가 있는가
        배열의 길이 : .size()
        공백 : .isEmpty()
        접근 : .get(n)
        포함 : .contains("s")
        위치 : .indexOf("s")

        불변성 : 특정 클래스의 인스턴스를 만드는 순간부터 이 값을 바꿀 수 없다.
            => 배열(List.of()) 또한 이미 만들어진 순간부터 추가를 할 수 없다.

        가변 리스트 : ArrayList / LinkedList / Vector 등

    - ArrayList vs LinkedList
        ArrayList : List 인터페이스의 데이터 구조 중 가장 기본적인 구조
        LinkedList : List 인터페이스의 데이터 구조 중 하나 / 참조
                    ArrayList보다 삽입과 제거가 느리다.
                    요소에 접근하는 것도 ArrayList가 더 빠르다.
                    하지만 LinkedList는 삽입과 제거가 ArrayList보다 빠르다

    - Vector vs ArrayList
        동기화 : 어느 데이터가 동시에 접근하여 삽입과 삭제 같은 수정을 행할 경우에 생기는 문제점을
        경쟁 상태라고 하는데, 이 문제 현상을 해결하는 것이 동기화이다.
        Vector : 동기화가 되어 있고, 안전하며 한 번에 하나의 스레드만 실행 가능하다. 하지만 비교적 느리며
        성능 저하로 사용이 지양된다.
        ArrayList : 동기화가 되어 있지 않아, 다수의 쓰레드가 동시에 접근하는 경우 문제가 생길 수 있다.
        또한 속도가 비교적 빠르며 하지만 불안전하다.
        .add(n,"s") : index n번째에 "s"를 추가를
        ArrayList는 중복을 허용
        .set(n,"s") : index n번째에 "s"로 변경
        .remove(n / "s") : index n번째에 / 배열안의 "s" 삭제
        .endsWith("s") : "s"로 끝나는 문자열을 찾음

        정렬을 하려면 ArrayList를 만들어야 한다.
        Collection.sort() : 정렬을 하는데 있어 기본적인 방법


    - Set Interface
        중복을 허용하지 않는 집합
        HashSet : set 인터페이스 여러 구현 중 하나
        .set(n,) / .add(n,) / .remove(n,): 불가 / 순서가 없기 때문에
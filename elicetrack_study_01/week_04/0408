## elice cloudtrack - 0408##

# ORM
    객체 - 관계 - 매핑
        객체와 데이터를 매핑해주는 도구
        대표적인 ORM : Hibernate, JPA

        장점 : 직관적인 코드로 데이터 조작
               재사용 및 유지보수 편리
               DBMS에 대한 종속성 감소

        단점 : 복잡도가 올라가는 경우 구현의 한계가 있다
               특정 쿼리는 튜닝이 필요
               프로시저가 많은 시스템에서넌 활용하기 어려움

    - JPA & Hibernate
    App <-> 
   (Repo) -> Spring Data JPA : CRUD 인터페이스 제공 / 인터페이스만 작성하면 구현 가능
             -> JPA : 자바 어플리케이션에서 관계형 데이터베이스를 사용하는 방식을 정의한 인터페이스
                        (EntityManager를 사용하면 App과 바로 연결)
                -> Hibernate : JPA 인터페이스를 구현한 구현체중 하나
                    -> JBDC 
                        <-> DB

    - 영속성 컨텍스트
        엔티티를 영구 저장하는 환경이다.
        객체를 보관하는 가상의 데이터베이스 역할을 수행한다.

        EntityManagerFactory에서 생성된 EntityManager는 요청받은 트랜젝션에 맞게 영속성 컨텍스트에서 
        엔티티들이 보관/관리되고 DB에 저장하거나 Entity에 DB의 데이터를 저장하는 동작을 수행한다.
            엔티티 생명주기 
                비영속(New/Transient) : 엔티티 객체를 생성
                영속(Managed) : 엔티티를 영속성 컨텍스트에 저장된 상태
                준영속(Detached) : 영속 상태의 엔티티를 더 이상 관리하지 않을 때의 상태 / 기능x
                삭제(Removed) : 엔티티가 영속성 컨텍스트와 DB에서 삭제된 상태

        Spring Data JPA의 Repository Interface에 자동으로 엔티티 매니저가 포함되어 있다.

    - 데이터베이스 연동하기(JPA)
        ddl-auto 옵션 종류
            create : 테이블 삭제 후 다시 생성
            create-drop : 위와 같지만 종료 시점에 테이블 drop
            update : 변경된 부분 반영
            validate : 엔티티와 테이블이 정상 매필되었는지만 확인
            none : 사용하지 않음
        주의 사항 : 운영 서버에서는 CUD은 사용하면 안된다.

        show-sql : JPA에서 만들어진 쿼리를 출력하여 확인하기 위한 옵션


    - Entity 설계
        @Entity : 해당 클래스가 엔티티임을 명시하기 위한 어노테이션
        @Table : 클래스의 이름과 테이블의 이름이 다른 경우에 사용되는 어노테이션 / 필요 시 사용
        @Id : 테이블의 기본 값 지정 어노테이션
        @GeneratedValue : 해당 필드의 값이 어떤 방식으로 자동 생성될지 결정 / 보통 @Id와 같이 사용 /옵션
        @Column : 객체 필드를 테이블 컬럼에 매핑 / 옵션
        @Enumerated : enum타입을 매핑할 때 사용


    - Repository 설계
        Repo extends JpaRepository<대상엔티티, PK타입>{ }
        쿼리를 자동 생성해주는 메서드 
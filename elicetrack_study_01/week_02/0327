## elice cloudtrack - 0327 ##

# DOM과 이벤트
    - DOM(문서 객체 모델) : 
        객체 지향 모델로써 구조화된 문서를 표현하는 형식
        - 종류 : Core / HTML / XML

        HTML 요소의 선택
            document.getElementById() : 해당 아이디의 요소를 선택
            document.getElementByClassName() : 해당 클래스에 속한 요소를 선택
            document.getElementsByName() : 해당 name 속성값을 가지는 요소를 선택
            document.querySelectorAll() : 해당 선택자로 선택되는 요소를 모두 선택
            document.querySelector() : 해당 선택자로 선택되는 요소를 1개 선택

        HTML 요소의 생성
            document.createElemet() : 지정된 HTML 요소를 생선
            document.write() : HTML 출력 스트림을 통해 텍스트를 출력

        HTML 이벤트 핸들러 추가 
            요소.onclick = function(){} : 마우스 클릭 이벤트와 연결될 이벤트 핸들러

    - JS 와 DOM
        var 변수명 = document.getElementBy요소("속성");
            요소 : TagName / Id / ClassName / Name
        변수명.style.스타일요소 = "s";
        변수명.innerHTML = "변경할 요소의 내용"

    - Node 객체
        HTML DOM에서 정보를 저장하는 계층적 단위
        노드 트리는 노드들의 집합으로, 노드 간의 관계를 나타낸다.
        노드 트리의 모든 노드는 서로 계층적 관계를 맺고 있다.

        - 종류 : document node / element node / comment node / attribute node / text node

        - 노드의 값 : nodeName / nodeValue / nodeType
        document.childNodes[0].node프로퍼티;
            => 모든 자식 노드 중에서 첫 번째 노드의 이름을 선택
        document.getElementById("요소").firstChild.nodeValue;
            => 아이디가 "요소"인 첫 번째 자식 노드의 노드값을 선택

    - Event : 이벤트에 반응해서 특정 동작을 수행
        이벤트 핸들러
            ex.
            <div name="text"  class="text" id="text">NULL</div>
            window.onload = function() {
                var text = document.getElementById("text"); 
                text.innerHTML = "페이지가 열렸습니다";
            }
                => 프로퍼티로 등록

            <button onclick="this.innerHTML='성공입니다!'">클릭하세요!</button>
                => 태그에 속성으로 등록

        addEventListener 사용법
        대상객체(변수명).addEventListener(이벤트명, 실행할이벤트핸들러(함수), 이벤트전파방식)

        여러가지 JS기능
            querySelector: 1개의 태그를 css 선택자를 기반으로 가져옵니다.
            querySelectorAll: 여러 개의 태그를 css 선택자를 기반으로 가져옵니다.
            preventDefault() : 현재 이벤트의 기본 동작을 중지시킬 때 사용됩니다.
            getAttribute : HTML 태그의 속성값을 가져올 때 사용합니다.
            window.scrollTo({}) : 원하는 위치로 스크롤 이동을 시킬 때 사용됩니다.
            offsetTop : 선택된 영역의 상단까지의 거리를 절대 좌표로 반환합니다.

        - 내비게이션 기능 구현하기
        var aTags = document.querySelectorAll("header a");
        for(var i = 0; i < aTags.length; i ++) {
            aTags[i].onclick = function(e) {
                e.preventDefault();
                var target = document.querySelector(this.getAttribute("href"));

                window.scrollTo ({
                    'behavior': 'smooth',
                    'top':  target.offsetTop
                })
            }
        }

        - 이미지 슬라이드
        var slider = document.querySelector("#slider");
        var slides = slider.querySelector(".slides");
        var slide = slides.querySelectorAll(".slide");

        var currentSlide = 0;

            setInterval(function() {
                var from = -(1024 * currentSlide);
                var to = from - 1024;
                slides.animate({
                    marginLeft: [from + "px", to + "px"]
                }, {
                    duration: 500,
                    easing: "ease",
                    iterations: 1,
                    fill: "both"
                });
                currentSlide++;
                if (currentSlide === (slide.length - 1)) {
                    currentSlide = 0;
                }
            }, 3000);

        - 탭 버튼 기능 구현
        var links = document.querySelectorAll(".tabs-list li a")
        var items = document.querySelectorAll(".tabs-list li")
        for (var i = 0; i < links.length; i++) {
            links[i].onclick = function(e) {
                e.preventDefault() ;
            }
        }

        for (var i = 0; i < items.length; i++) {
            items[i].onclick = function() {
                var tabId = this.querySelector("a").getAttribute("href") ;
                console.log(this.classList);
                document.querySelectorAll(".tabs-list li, .tabs div.tab").forEach(function(item) {
                    item.classList.remove("active");
                    console.log(item);
                });
                document.querySelector(tabId).classList.add("active");
                this.classList.add("active");
            }  
        } 



## algorithm study - [0513] ##

# 알고리즘의 효율 분석

- 시간 복잡도 : 알고리즘의 성능을 나타내는 지표, 입력 크기에 대한 연산 횟수의 상한을 의미한다.

    시간 복잡도를 측정하는 방법은 '연산 횟수'와 관련이 있다.
    점근적 표기법 : 입력 크기에 따른 연산 횟수의 추이를 활용해서 시간 복잡도를 표현하는 방법

    빅오 표기법 : 점근적 표기법으로 상한선을 활용하는 방법이다.
        최고차항을 남기고 계수를 지워서 표기하는 것.

- 시간 복잡도 계산해보기

    별 찍기 문제 : f(n) = 1+2+...+N = N(N+1)/2
        => O(N^2)

    박테리아 수명 문제 : f(n) = (1/2)^Y*N
        => O(logN)


# 코딩 테스트 필수 문법

- 항상 앱실론(epsilon)을 포함한 연산에 주의하자.
- 레퍼런스 타입은 꼭 필요한 경우가 아니면 권장되지 않기 때문에 프리미티브 타입을 사용하자

- 컬렉션 프레임워크
    배열(Array) : 데이터의 개수가 정해져 있을 때 사용하기에 유용하다. / toString()메서드를 사용하면 배열 요소를 쉽게 출력할 수 있다.
    인덱스 : 특정 원소 위치에 빠르기 접근하기 위한 기능으로 시간 복잡도는 O(1)이다.
    리스트 : 일반적으로 ArrayList를 의미하며, 배열과 다르게 가변 크기이기 때문에, 새로운 데이터를 삽입 또는 삭제할 수 있다. 기존 데이터 삭제시 시간 복잡도가 O(N)까지 커질 수 있음을 주의하자.
    해시맵 : 키와 값을 쌍으로 저장하는 해시 테이블로 구현되어 있으며, 키를 사용하여 값을 검색하는 자료 구조이다.
        검색 : key값을 변수로 선언하고 map에 key값을 포함하고 있는지 확인하여 출력할 수 있다.
        삽입 및 수정 : .put(key, value)
        삭제 : .remove(key)

- 문자열 : 이뮤터블 객체(값을 변경할 수 없는 객체를 의미)
    추가 및 삭제 : 초기화하고 새로운 문자열로 출력
    수정 : .replace를 활용하여 수정을 한다. (삭제 또한 가능 "")

    StringBuffer와 StringBuilder : String의 값을 변경하는 연산이 많을 때 사용하는 클래스 / StringBuilder를 주로 사용
        StringBuiler 활용법
            객체를 생성(new)하고 .append(a) / .deleteCharAt(n) / insert(n,a) 등을 사용하여 추가,삭제,수정 작업을 할 수 있다.

- 메서드 : 클래스 내부에 정의한 함수 / 코딩 테스트에서 드물게 사용된다.
    람다식 : 익명함수라고도 하며 딱 한번 사용할 함수를 간결하게 표현하여 가독성이 좋게 하는 메서드 작성 방법이다.

- 코드 구현 방식 :
    조기 반환 : 코드의 실행 과정이 함수 끝까지 도달하기 전에 반환하는 기법
    보호 구문 : 로직을 진행하기 전 예외 처리 코드를 추가하는 기법

- 제네릭 : 빌드 레벨에서 타입을 체크하여 타입 안정성을 제공하며, 타입 체크와, 형변환을 생략할 수 있다.
    코딩 테스트에서 여러 타입의 데이터를 하나의 컬렉션에 넣어야하는 경우는 거의 없기 때문에 제네릭으로 타입을 강제하여 실수를 방지하는 것이 좋다.
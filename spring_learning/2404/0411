## spring_learning - project 0411 ##

# basic
    서버
    클라이언트
    DB
        RDB
            Oracle / mySQL 등등
                SQL : 데이터를 검색 하는 언어
                NoSQL : Not Only SQL / 스케일 아웃은 DB분산에 필요한데, 이때 트랜잭션을 사용하면 성능이 떨어진다. RDB의 이 문제를 해결하기 위해 NoSQL이 등장하였고 데이터 모델링을 어떻게 하냐에 따라서 MongoDB, 다이나모디비 등 다양한 NoSQL DB가 있다.

    IP : 식별하고 통신하기 위한 주소
        포트 : 식별한 IP 내의 서비스를 구분하기 위한 번호

    라이브러리 : 클래스, 함수 등을 모아놓은 독립적인 코드의 모음 / 개발자들에게 편리함을 줌
    프레임워크 : 소프트웨어 개발 환경 / 규칙을 지켜야하지만 개발 효율이 굉장히 높다

    자바 어노테이션 : 코드를 추가하는 표식 / JDK 1.5이상
        @Override : 선언된 메서드를 재정의(오버라이드)함을 의미

    Spring : 2003년 6에 등장한 자바 기반 프레임워크
        Spring boot : Spring의 복잡성을 보완하고자 나온 스프링에 속한 프레임워크
            was : 웹 애플리케이션 서버가 내장되어 있다.
            빌드 구성을 단순화하는 스터터를 제공
            xml을 설정하지 않고 자바 코드로 모두 작성
            JAR를 이용해서 자바 옵션만으로도 배포 가능
            스프링 액츄레이터(관리도구)를 제공

        제어의 역전(IoC)과 의존성 주입(DI)
            IoC : 클래스 내에서 다른 객체를 생성하거나 제어하는 것이 아니라 외부에서 관리하는 객체를 가져와서 사용하는 것을 말함 / 스프링에서는 스프링 컨테이너가 객체를 관리, 제공하는 역할
                => 생성과 관리를 개발자가 하는 것이 아닌 프레임워크가 대신함
            DI : 어떤 클래스가 다른 클래스에 의존한다는 뜻. @Autowired를 사용하여 스프링 컨테이너에 있는 빈을 주입하는 역할 = 빈은 스프링 컨테이너에서 관리하는 객체
                ex. 클래스 A와 객체 B있다. 클래스 A가 객체 B를 사용하고 싶을 때 스프링 컨테이너가 생성해서 객체B를 주입해준다. 

        스프링 컨테이너 : 스프링이 제공하는 빈을 생성하고 관리 방법
        빈 : 스프링 컨테이너가 생성하고 관리하느 객체 등록하기 위해 어노테이션을 사용
            @Component : 해당 어노테이션을 붙이면 클래스는 빈으로 등록된다.

        관점 지향 프로그래밍(AOP - Aspect Oriented Programming)**
            프로그래밍에 대한 관심을 핵심 관점, 부가 관점으로 나누어 관심 기준을 모듈화(개발) 하는 것

        이식 가능한 서비스 추상화(PSA - Portable Service Abstraction)
            스프링에서 제공하는 기술들을 추상화하여 일관된 방식으로 개발자가 쉽게 사용도록 하는 인터페이스
                => 클라이언트의 매핑과 클래스, 메서드의 매핑을 위한 애너테이션
                ex. DB 접근 기술 JPA, MyBatis, JDBC을 일관된 방식으로 접근하는 인터페이스 제공
                    WAS : tomcat, 언더토우, 네티에서 실행하여도 기존 코드 그래도 사용 가능

        스트링 부트 스타터*
            spring-boot-starter-{작업유형}
                web / test / validation / actuator / data-jpa
                build.gradle 의존성으로 명시되어 있음

        자동 구성*
            스프링 부트의 중요한 개념 / 최소한의 설정으로도 실행되게 여러 부분을 자동으로 구성함
            spering.factories파일에 담겨 있다.

        @SpringBootApplication
            @SpringBootConfiguration : 스프링 부트 관련 설정을 나타내는 어노테이션
            @ComponentScan : 사용자가 등록한 빈을 읽고 등록하는 애너테이션
                @Component라는 어노테이션을 가진 클래스들을 찾아 빈으로 등록하는 역할을 한다.
                    => 모든 빈에 해당 어노테이션을 사용하는 것이 아닌 감싸는 어노테이션을 사용
                        ex. @Configuraion : 설정 파일 등록
                            @Respository : ORM 매핑
                            @Controller,@RestController : 라우터 
                            @Service : 비즈니스 로직
            @EnableAutoConfiguraion : 자동 구성을 활성화 하는 어노테이션 / 사용 시 spering.factories의 파일에 클래스들이 자동 설정됨

        컨트롤러 살펴보기
            @RestController는 라우터 역할을 하는 어노테이션이다.
                라우터 : HTTP 요청과 메서드를 연결하는 장치. 해당 어노테이션이 있어야 클라이언트의 요청에 맞는 메서드를 실행 

        프로젝트 구조 관계 설명
            웹브라우저 --A요청--> Controller --분기 처리--> TestService 요청에 맞는 작업 실행
                분기처리 : 어떤 로직을 수행하였을 때 해당 로직의 조건을 만족하였을 때와 만족하지 못했을 때를 나누어 처리하는 것

        프레젠테이션 계층 : HTTP 요청을 받고 이 요청을 비즈니스 계층으로 전송하는 역할 / @Controller
        비즈니스 계층 : 비즈니스 로직(서비스를 만들기 위한 로직(웹 사이트에서 벌어지는 모든 작업의 데이터, 예외, 프로세스 등의 처리를 위한 로직))을 처리 / @Service
        퍼시스턴스 계층 : DB 관려 로직을 처리, DB에 접근하는 DAO 객체를 사용 / DAO : DB계층과 상호작용을 하기 위한 객체 / Repository

        프로젝트 디렉터리 구성
            /main : 실제 코드를 작성하는 공간 프로젝트 실행 시 필요한 코드나 리소스 파일이 포함되어 있음
            /test : 프로젝트의 소스 코드를 테스트할 목적의 코드나 리소스 파일을 포함
            build.gradle : 빌드를 설정하는 파일 / 의존성이나 플로그인 설정 등이 명시되어 있음
            settings.gradle : 빌드할 프로젝트의 정보를 설정하는 파일

            /resources/static : JS, CSS, 이미지와 같은 정적 파일을 넣는 용도 

        요청-응답 과정
            포스트맨or브라우저 --/test Get 요청--> 톰켓(서버) --> 스프링 부트 --> 서블릿 URL분석 --> 요청을 처리할 Controller 
            --> Controller 내부 메서드가 비즈니스 계층과 퍼시스턴스 계층을 통하면서 필요한 데이터를 가져옴 --> 뷰 리졸버는 템플릿 엔진을 통해 데이터를 생성
            ==> members를 return하여 포스트맨or브라우저으로 볼 수 있음

        테스트 코드*
            given-when-then 패턴
                given : 테스트 실행 준비 과정 / 객체 생성
                when : 테스트 진행 / API호출
                then : 테스트 결과 검증

            JUnit : 단위 테스트 프레임워크 / 작은 단위(메서드)로 검증하는 것
                @Test 어노테이션을 제공 / 선언 시 새 인스턴스를 생성하고 독립 테스트 가능
                Assertions 메서드 제공
                @BeforeAll : 전체 테스트 시작하기 전에 처음으로 한 번만 실행 / static
                @BeforeEach : 테스트 케이스 시작하기 전에 매번 실행
                @AfterAll : 전체 테스트케이스가 종료하고 한번만 실행 / static
                @AfterEach : 테스트 케이스가 종료하기 전에 매번 실행
                    
                    Assertions : JUnit과 함께 사용해 검증문의 가독성을 높혀주는 라이브러리
                        ex. assertThat(a+b).isEqualTo(sum); //여러 메서드가 있다.*

                @SpringBootTest : 클래스를 찾고 그 클래스에 포함되어 있는 빈을 찾은 다음 테스트용 애플리케이션 컨텍스트를 만든다
                @AutoConfigureMockMvc : MockMvc를 생성하고 자동으로 구성하는 어노테이션, 서버에 배포하지 않아도 테스트용 MVC 환경을 만들어 요청 및 전송, 응답 기능을 제공하는 유틸리티 클래스이다.

                ObjectMapper : Jackson 라이브러리에서 제공하는 클래스, 객체와 JSON간의 변환을 처리해줌 / 객체 직렬화
                    ex. Code code = new Code(13)
                        objectMapper.writeValueAsString(code)
                        => {'value' : 13}

                
                



## spring_learning - project 0412 ##

    ~Spring
        DBMS : 데이터베이스 관리자 시스템
            DB는 많은 사람이 공유할 수 있어야 하므로 동시 접근을 할 수 있어야한다.
            관계형 / 객체-관계형 / 도큐 먼트형 / 비관계형 등으로 분류
                관계형 DBMS : RDBMS => 테이블 형태로 이루어진 데이터 저장소
                    테이블 table : DB에서 데이터를 구성하기 위한 가장 기본적인 단위 / 행과 열로 구성된다
                    행 row : 가로로 배열된 데이터의 집합 / 반드시 고유한 식별자인 기본키를 가진다. record라고 부르기도 한다.
                    열 column : 행이 저장되는 유형의 데이터 / 각 데이터에 대한 무결성을 보장
                    기본키 PK : 행을 구분할 수 있는 식별자 / 중복 값을 가질 수 없고 null이 될 수 없다
                    쿼리 query : 데이터터를 조회하거나 CRUD 와 같은 처리를 하기 위해 사용되는 명령문 SQL 사용

        ORM : 자바의 객체와 DB를 연결하는 프로그래밍 기법 / DB의 값을 객체처럼 사용할 수 있다.
            JPA & 하이버네이트
                JPA : 관계형 테이터베이스를 사용하는 방식을 정의한 인터페이스 / 도메인과 DB사이의 다리 역할
                    hibernate : JPA 인터페이스를 구현한 구현체이다 자바용 RRM 프레임워크 / JDBC API를 사용
                        => 자바 객체를 통해 DB 종류에 상관 없이 DB를 자유자재로 사용할 수 있다.
                
                    엔티티 : DB의 테이블과 매핑되는 객체 / 본질적으로는 자바의 일반 객체와 다르지 않지만 DB테이블과 직접 연결된다는 특별한 특징이 있다.
                    엔티티 매니저 : 엔티티를 관리해 DB와 APP 사이에서 객체를 CRUD등의 역할을 한다. / 직접 생성하거나 관리할 필요가 없다
                    엔티티 매니저 팩토리 : 엔티티 매니저를 생성하는 곳

                    영속성 컨텍스트 : 엔티티 매니저가 엔티티를 저장하여 관리하는 가상의 공간
                        1차 캐시 : 캐시의 키는 @Id 어노테이션이 달린 기본키 역할을 하는 식별자이며 값은 엔티티이다. 캐시된 데이터는 DB를 거치지 않아 빠르게 조회가능
                        쓰기 지연 : 트랜잭션을 커밋하기 전까지는 DB에 보내지 않고 쿼리에 모았다가 commit 시 한번에 실행하는 것 을 의미함
                        변경 감지 : 1차 캐시에 저장되어 있는 엔티티의 값과 현재 엔티티의 값을 비교하여 변경된 값이 있다면 감지하여 자동으로 DB에 반영
                        지연 로딩 : 필요할 때 쿼리를 날려 데이터를 조회하는 것을 의미
                            => DB의 접근을 최소화해 성능을 높힐 수 있나느 공통점을 가진다.

                    엔티티의 상태 : 영속성 컨텍스트가 관리하고 있지 않는 4가지 상태 / 특정 메서드를 호출해 변경할 수 있다
                        new : 생성 시 처음에는 비영속 상태
                        persist() : 엔티티를 영속성 컨텍스트의 관리 생태로 변경
                        detach() : 영속성 컨텍스트에서 엔티티를 관리하지 않는 상태로 변경 / 준영속 상태
                        remove() : 엔티티를 영속성 컨텍스트와 DB에서 삭제

        Spring data & Spring data JPA
            Spring data : 비즈니스 로직에 집중할 수 있게 DB 사용 기능을 클래스 레벨에서 추상화하여 스프링 데이터에서 제공하는 인터페이스를 통해 스프링 데이터를 사용할 수 있다. 각 DB의 특징에 맞춰 확장해 제공하는 기술도 제공

            Spring data JPA : JPA를 쓰기 편하게 만들어 놓으 모듈

            

## elice cloudtrack - [3기-01-04-02] ##

# Constructor(생성자)
    - 필요한 기본 정보를 세팅하는 과정
    - 메서드의 이름은 클래스명과 동일
    - 메서드명 / 반환값 x / 멤버 변수를 초기화 / this를 이용해 멤버변수와 매개변수를 구분
    
    - 메서드가 없는 클래스를 인스턴스화 해도 오류가 발생 하지 않는 이유는 기본 생성자가 있기 때문이다. ex. Name(){}

    - 메소드에서 멤버 변수를 초기화 why?
        private 등의 접근 제어자에 의해 클래스 외부에서 멤버 변수를 초기화 할 수 없는 경우가 발생 하기 때문

# this
    - 클래스 내부에서 객체 자신을 참조 / 접근
    - why use?
        메서드 내부에 클래스 내부의 변수와 동일한 이름의 변수를 구분하기 위해

# Overloading 과 this()
    - 한 클래스 내에서 동일한 이름을 가진 메서드를 여러 개 선언
        자료형에 따라 구현 수 있다. 
        -> 구분? 메서드 시그니처(메서드명, 자료형, 개수)
    - 생성자도 메서드의 한 종류로 Overloading 할 수 있다.
    
    - this() : 생성자 내부에서만 사용 가능한 특수한 메서드
               생성자 내부 첫 줄에서만 호출이 가능

* for(String item: inventory) System.out.print(item + " ");
    => 배열 내에 있는 모든 데이터를 출력하는 코드

* inventory.indexOf(item)
    => 배열 내에서 item에 해당하는 위치를 찾을 때 사용하는 코드

* ArrayList 메서드
    get(n) : 인덱스 n번쨰 요소를 반환
    size() : 요소의 개수를 반환
    add(item) : item 요소를 마지막에 추가
    remove(item) : item과 동일한 첫 번째 요소를 제거



## elice cloudtrack - [3기-01-04-03] ##
    
    # 클래스 및 인스턴스 생성
        인스턴스 생성하고 해당 인스턴스 객체에 멤버 변수를 초기화 및 값을 준다.

    # 반환값 있는 메서드 작성하기
        반환 값이 있는 경우 return 으로 반환 해주어야한다
        .equals(매개변수)는 앞의 문자열과 매개변수의 문자열을 비교해서 결과를 출력한다.

    # 생성자로 멤버 변수 초기화하기
        private 접근자를 사용한 경우 메인 클래스에서 변수를 직접적으로 접근할 수 없기 때문에 클래스 내에 생성자를 만들어서 Overloading에 맞게 사용한다.

    # this와 this()의 차이
        this는 클래스 내에서 접근할 때 사용하는 키워드이고
        this()는 특별한 함수로 사용할 수 있다.



## elice cloudtrack - [3기-01-05-01] ##

# 상속
    - 상속이란?
        기존에 존재하던 클래스의 멤버 변수와 메서드를 그대로 물려받아 멤버 변수 및 메서드를 추가하거나 재정의하여 새로운 클래스를 정의하는 것이다.

    - why use?
        1. 중복되는 변수나 메서드를 다시 작성하지 않아도 된다.
        2. 클래스의 재사용성으로 유지 보수가 매우 편해진다.
        3. 클래스 간의 계층 관계 / 가독성을 높히고 다형성을 구현

# 상속 구현하기 - extends
    - extends를 이용하여 상속을 받고 기존 클래스는 부모 클래스, 상속받는 클래스는 자식 클래스라고 한다.
        ex. class 자식클래스 extends 부모클래스 {}


# 접근 제어자 
    - 접근 범위
        public : 모든 패키지나 클래스에서 접근이 가능하다
        protected : 다른 패키지에서는 접근이 불가능하지만 다른 패키지의 자식 클래스에서는 접근이 가능하다.
        (default) : 같은 패키지 내의 클래스(부모,자식)에서만 접근이 가능하다.
        private : 현재 클래스에서만 접근이 가능하다.

#getter 와 setter
    - public을 제외한 다른 접근 제어자에 접근하기 위해서 이용

    - getter : 멤버 변수를 반환해주는 메서드 / 메서드를 통해 멤버 변수 값을 읽을 수 있다. / 반환 값 존재
    - setter : 멤버 변수를 변경하는 메서드 / 메서드를 통해 멤버 변수의 값을 변경한다. / 매개 변수 존재

    - why use?
        검증 절차를 통해 유효한 데이터만 저장
        객체의 무결성을 보장
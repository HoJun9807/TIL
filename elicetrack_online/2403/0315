## elice cloudtrack - [3기-02-04-01] ##

# 유용한 클래스
    - import : 다른 모듈의 패키지를 가져온다
    - export : 외부로 노출시킬 패키지
    - java.base : Java의 기초가 되는 모듈

    - java.lang 
        가장 많이 사용되는 패키지로 따로 import 하지 않아도 사용할 수 있는 패키지이다
            ex. Object / String / Math / Wrapper / Enum

        - Exception : throw / try-catch
                    : 컴파일 시 
        - RumtimeException : 동작 시

        - Object : 모든 Java 클래스 들의 조상 클래스 / 메소드로만 구성
            - toString() : 문자열을 만들어 반환 / 인스턴스의 모든 정보를 담도록 한다.
            - clone() : 내부 필드값을 복사하여 새로운 인스턴스를 생성하고 반환한다.

            - equals(Object) : 필드 값을 비교하지 않고 단순히 그 하나의 값이 같은지 비교
            필드 값을 비교하기 위해서는 오버라이드해서 return으로 넘겨줘야함
            - hashCode() : 객체를 식별할 수 있는 하나의 정수를 리턴
                => equals를 오버라이드 하였을 때 hashCode() 또한 같이 오버라이드 해야함

        - String : 문자열을 다루기 위한 class 불변의 속성을 가진다.
            - StringBuffer, StringBuilder
            - 동시성 문제
                - a.cotains(b) 문자열 b가 문자열 a에 포함되는지 확인하는 메서드

        - Math
            min/max / sin/cos / floor/ceil / E / PI 등

        - Wrapper
            기본 데이터 타입을 객체로 감싸거나 래핑하여 추가적인 기능을 제공하는 클래스나 함수 
                ex. int -> Integer() / float -> Float()

        - Enmum class
            관련있는 상수의 집합을 표현하는 클래스
            상수는 대문자로 표현하고 해당 값은()안에 넣고 ,을 사용하여 구분하며 마지막에는 ;으로 처리한다
            다른 클래스와 같이 변수,생성자,함수를 선언해서 사용 할 수 있다.

    - java.math
        BigInteger : 정수 배열을 이용하여 큰 정수를 표현
        BigDecimal : 큰 실수르 표현
            => String으로 사용하는 것을 권장
            Scale : 소숫점 자릿수
            precision : 전체 자릿수

    - java.util
        Arrays : 배열을더 쉽게 다루기 위한 클래스
            copyOf(a,1) : ()안에 변수명과 copy할 인덱스 값을 입력하면 해당 인덱스 값까지 복사됨
            copyOfRange(a,1,3) : copyOf와 사용은 동일하지만 범위를 지정(to-1)한다.

            fill(a,1) : 배열의 모든 값을 원하는 값으로 저장

            binarySearch(a,"찾는 값") : 값의 인덱스 위치를 반환

            Arrays.sort(a) : 배열 a를 오름차순
            Arrays.sort(a, Collectios.reverseOrder) : 배열 a를 내림차순

        Objects :
            equals : 두 객체를 비교 // null값을 방지하기 위해서 사용
            ifNull : 가독성을 높히기 위해

        regex :
            정규표현식 : 규칙을 가진 문자열의 집합을 표현하는 데 사용하는 형식 언어
                      : 원하는 문자열을 찾거나, 검증, 치환하기 위한 문자열
                [ab] : a,b에 해당하는 값
                [a|b] : a,b에 해당하는 값
                [^ab] : a,b를 제외한 나머지 값
                [a-cA-c] : -안의 값을 포함한다.
                [ .] : 모든 문자

            수량자
                E[a-z]* : E를 포함하면서 붙어있는 a-z까지 
                E[a-z]+ : E와 붙어있는 a-z까지 
                E[a-z]? : E와 붙어있는 a-z중 0 or 1개 
                E[a-z]{n} : E와 붙어있는 a-z중 {n}개 
                E[a-z]{n,} : E와 붙어있는 a-z중 {n}개이상 있는 문자열
                E[a-z]{n,m} : E와 붙어있는 a-z중 {n}개이상 {m}개 이하인 문자열

            엥커

        Scanner
            hasNext() : 토큰이 있으면 true,없으면 false

        StringTokenizer : 문자열을 구분자로 쪼개주는 클래스
            hasMoreTokens() :남아있는 토큰이 있으면 true, 없으면 false;
            hasMoreElements() : 남아있는 토큰이 있으면 true, 없으면 false;
            nextToken() : 다음 토큰을 반환        
            nextToken(Sting delim) : 전달한 구분자로 기존의 구분자를 대체하고 다음 토큰을 반환
            nextElement() : 다음 토큰을 Object로 return
            countTokens() : 남아있는 토큰의 개수를 return
        
        Random : 난수를 생성하는 클래스 / 시드, 인스턴스 생성
            nextBoolean() : true, false
            nextInt() : int 전범위
            nextInt(int a) : 0이상 a미만
            nextInt(int a,int b) : a이상 b미만
            nextFloat() : 0.0 이상 1.0 미만
            nextGaussian() : 가우시안 분포

        Calender : 날짜와 시간을 이용하기 위해
            getTime() : 시간
            getTimeMillis() : 현재 시간을 milli단위로 표현
            getTimeZone() : 위치
            getCalenderType() : 타입확인

    - java.io
        BufferReader, BufferedWriter

    - java.time
        LocalDate
        LocalTime : 불변성을 가진다. 따라서 인스턴스의 시간은 변경할 수 없다
        LocalDateTime :

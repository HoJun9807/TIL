## elice cloudtrack - [3기-07-02] ##

# Logging 
    로깅의 필요성 : 디버깅, 문제 해결, 모니터링, 에러 리포트를 위한 필수 도구
    로그를 기록하는 상황에 따라 커스터마이징

    로그 콘텐츠 : Error / Debugging / 주요 이벤트
    로그 기록 : 콘솔(휘발성) / 파일(필터링에 어려움) / 이메일&문자(관리자에게 알림) / 데이터베이스(필터링이 쉽고, 효율적)
    로깅 레벨 : Trace < Debug < Info < Warn < Error

    Spring Boot의 로깅
        .properties 파일에서 로깅 레벨 조정 가능
        SLF4J : 여러 로깅 프레임워크의 복잡한 기능과 구현 세부 사항을 숨기고, 일관된 인터페이스를 통해 로깅 기능을 제공
            내부 구조나 동작 방식을 알 필요 없이 로깅 기능을 사용할 수 있게 됨. / SLF4J API를 사용하여 로그를 작성
            Logback : SLF4J의 구현체 중 하나이다. 실제 로깅 작업을 처리

    Logback 설정
        @SLF4J 어노테이션을 사용하여 간단하게 작성 할 수 있지만 로그 관련 Controller를 생성하여 클래스르 불러와 객체 생성을 통해 사용할 수도 있다.

# Junit
    테스팅의 중요성 : 개발의 핵심 과정 중 하나로 코드의 안정성, 기능성, 성능을 검증하는 데 필수적
    안정적인 서비스를 제공하기 위한 과정

    장점 : 초기 버그 발견 / 성능 최적화 / 기능 검증 / 고객 만족도 향상 / 재배포 및 재개발 비용 감소 / 효율적인 리소스 활용 / 유지보수의 용이성

    FIRST 원칙
        Fast / Independent / Repeatable / Self-validating / Timely

    @Test 어노테이션을 사용하고 public void이며 파라미터를 받으면 안된다.
        Assertion 예외를 발생시키지 않으면 성공

    Assert API를 활용해 가독성과 효율을 높힌 테스팅을 진행할 수 있다.

    테스트 패턴과 Mock
        Given - When - Then

        Mock : 테스트 환경에서 실제 객체의 행동을 모방하는 객체

    Spring Boot App Test
        단위 테스트
            목적 : 컴포넌트나 함수의 동작을 검증 / 의존성이 없음
            특징 : 빠르고 Mock 객체를 사용해 외부 의존성을 제거

    테스트 주도 개발(TDD)
        테스트 코드를 먼저 작성하고, 그 테스트를 통화하는 실제 코드를 작성하는 개발 방법론
        장점 : 코드 품질 향상, 리팩토링 용이성, 버그 발생 확률 감소

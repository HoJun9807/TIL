## elice cloudtrack - [3기-06-03] ##

# Spring Data JPA
    - Pagination
        전체 데이터가 아닌 필요한 데이터만큼 나눠서 해당 데이터를 빠르게 응답할 수 있음
            PagingAndSortingRepository : JPA가 상위 인터페이스이므로 JPA를 사용중이라면 수정없이 사용 할 수 있다.
            findAll(Sort/Pageable) : 정렬 / 페이징
    
    - @Query 어노테이션
        JPQL : 객체지향 쿼리로 DB 테이블이 아닌 엔티티 객체를 조회 / DB종류에 영향을 받지 않음
        Native Query : 유연하게 쿼리 작성이 가능하다 
                but. Spring Data JPA의 장점을 누릴 수 없고, Pagination을 할 때 추가적인 작업이 필요하며, 동적 정렬을 지원하지 않아 order by와 같이 따로 처리가 필요하다.

    - Lombok
        반복되는 코드를 줄이기 위한 Java Library : getter, setter, 생성자 등을 어노테이션만으로 생성

    - Audit(감사)
        엔티티와 관련된 이벤트르 추적하고 기록 / 감독하고 검사한다는 뜻 / CUD와 같이 변경되는 작업

    - Transaction
        DB Transaction : DB와 관련되어 수행된느 작업 단위 / ex. 계좌이체
            작업을 진행하다가 문제 발생 시, 이전 상태로 되돌리는 롤백 진행
            작업 단위 / 여러 처리를 하나의 단위로 취급

            - ACID
                원자성 : 완전히 성공/실패 단일 단위로 처리되도록 보장
                일관성 : 테이터베이스의 상태(정보)를 유지
                격리성 : 병행되는(동시 실행) 트랜잭션들이 서로 독립 / 같은 데이터를 작업하지 않게 해야함
                지속성 : 트랜잭션이 성공하면, 결과가 기록되어야 함

            격리 수준 : @Transaction의 isolation 속성으로 관리

            AOP(관점 지향 프로그램)
                관점(Aspect)을 기준으로 묶어 개발하는 방식

    - 연관관계 매핑 종류
        객체 간 상호 협력하는 객체지향 : 객체들을 서로 연결할 수 있도록 객체 간 참조를 사용한다.

        - 연관관계 매핑 
            JPA에서 성능을 결정하는 중요한 요소
            연간관계 설정을 통해 객체 '참조'와 테이블의 외래키를 매핑시켜 사용함
            기준으로는 방향성(Direction), 다중성(Multiplicity)이 있다.
                방향성 : 단방향 / 양방향 (엔티티,객체)

        - 연관관계 주인
            두 테이블 간의 관계
            한 테이블에서 다른 테이블 PK를 FK로 가지게 됨
            FK를 가진 테이블이 주인이 된다.
            주인이 아닌 엔티티는 읽는 작업만 가능
            접근하는 참조 값에는 참조되는 컬럼의 이름을 설정한다. / @JoinColumn(name="POST_ID")
                                                                => 단방향일 때는 참조하는 엔티티 속성에 너무 벗어나지 않은 이름을 설정한다.

        - 다중성 : N:1,1:N,1:1,N:N
            어떤 엔티티를 중심으로 보는지에 따라 연관관계 표현은 달라진다.


        - 다대일 단/양뱡 매핑
            n:1 단방향 매핑 : 참조하는 엔티티에만 작성하고 당하는 엔티티에는 추가로 설정하지 못한다.
            n:1 양방향 매핑과 주인 :
                두 개의 엔티티중 하나의 관계를 연관관계 주인으로 정하고 FK를 관리
                주인이 아닌 엔티티는 mappedBy 속성을 사용하고 조회만 가능
            @ManyToOne : owner가 가지는 속성 / ex. 여러 댓글에 하나의 글
                속성 : optional / fetch / cascade

                - 영속성 전이 : 특정 엔티티까지 생명주가가 같은 경우가 있다.
                                ex. 글이 삭제된느 경우 글에 달린 댓글들 또한 같이 삭제 되어야한다.
                    타입 종류(CascadeType.) : ALL / PERSIST / MERGE / REMOVE / REFRESH / DETACH

        - 일대다,일대일,다대다 매핑
            1:n : @OneToMany : 하나의 글에 여러 댓글
            1:1 : @OneToOne : 하나의 글에 하나의 이미지만 들어갈 수 있다고 할 때의 관계
            n:n : @ManyToMany : 유저는 여러 글에 like 가능
           
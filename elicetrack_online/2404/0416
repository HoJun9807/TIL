## elice cloudtrack - [3기-07-05] ##

# AOP
    OOP의 한계 => 객체를 지향하는 것은 좋지만 너무 많은 반복이 발생한다.
    흩어진 관심자의 문제점 --> 중복 --> 유지보수의 복잡도 증가 => 버그 및 비용이 증가

    AOP
        흩어진 관심사 --> 중앙화

        앱 개발 시 코드에는 보안, 로깅, 트랜잭션 등 관련한 소스코드이 중복이 늘어난다.
            => Aspect(관점)을 분리하여 재사용성, 유지보수성 상승

    AOP vs OOP
        OOP : 객체 지향 프로그래밍 / 캡슐화,상속,다형성,추상화
        AOP : 관점 지향 프로그래밍 / 관심사의 분리, 중앙화, Aspect 모듈, 중복제거
            => 두 가지 프로그래밍을 합쳐 재사용성과 유지보수를 용이하게 하며 중앙화로 인한 코드의 간결성 및 관리의 편리성을 증가시킨다.

    AOP의 프레임워크
        스프링 AOP : 프록시 기반, 통합성, 설정의 유연성, 간결함
        AspectJ : PARC에서 개발한 자바 프로그래밍 AOP / 광범위한 기능 제공 / 위빙, Spring호환

    @Aspect : AOP의 기본 모듈
        Join Point : Aspect가 적용될 수 있는 위치
        Pointcut : 정규 표현식 / Join Point를 적용시키기 위한 표현식
        Advice : 타겟에 제공할 부가 기능을 담고 있는 모듈
        Target : 비즈니스 로직을 가진 일반적인 객체
        Proxy : Target 객체에 Advice를 적용한 후 생성되는 객체

    AOP 단점과 주의점
        복잡도 증가 / 무분별한 사용으로 인한 성능 저하 / 지나친 의존성으로 업데이트에 취약 / 테스트의 어려움

    AOP 활용
        로깅과 모니터링 / 보안과 권한 검사 / 트랜잭션 관리 / 에러 핸들링 / 성능 최적화
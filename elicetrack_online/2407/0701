## elice cloudtrack - [3기-18] ##

# 클라우드 컴퓨팅

- 클라우드 컴퓨팅 : 사용자의 직접적인 활발한 관리 없이, 데이터 스토리지와 컴퓨팅 파워와 같은 컴퓨터 시스템 리소스를 필요 시 바로 제공하는 서비스
    기능 요소 : 컴퓨팅 기능 / 네트워크망 / 가상화 기술

    낮은 구축비용 & 관리비용 / 데이터 센터 내 보안 기능 제공, 데이터 관리 / 중앙 관리 / 중앙 스토리지에 저장 관리 / 다양한 시큐리티 서비스 제공
    !인터넷 속도에 대한 의존성 / 속도 저하 / 사용자 수에 따른 인터넷 속도 / 보안 규정 / 중앙 스토리지에 저장 관리 / 관리 기능 부족(제한적) / 추가적인 비용

    책임에 따른 클라우드 컴퓨팅 유형 : 클라우드 응용(SaaS) / 클라우드 플랫폼(PaaS) / 클라우드 인프라(IaaS)

    클라우드 모델
        public(AWS) : 일반적으로 사용되는 클라우드 컴퓨팅 서비스
        private(OpenStack) : 원하는 기업에서 자체적으로 전용망을 이용하여 구축하는 폐쇠적인 클라우드
        hybrid : 위의 두 클라우드 서비스를 조화롭게 사용한 클라우드 서비스


- 클라우드 컴퓨팅 기반 기술
    클라우드 게임 : 고사양의 게임을 클라우드 환경에서 사용할 수 있는 서비스

    클라우드 기본 아키텍쳐 : 가상 머신 / 클라우드 관리 / 운영체제 / 물리적인 컴퓨터 서버
        
    클라우드 요소 기술 : 스케일링을 통한 서버 관리
        하이퍼바이저 : 호스트 컴퓨터에서 다수의 운영 체제를 동시에 실행하기 위한 논리적인 플랫폼

        전가상화 : 하이퍼바이저가 모든 일을 담당
        반가상화 : 요청에 필요한 모든 일을 준비해서 전달
        호스트 기반 가상화

        관리기술 : 리소스 / 이미지 / 네트워크 / 유저 / 데이터
            리소스 : CPU / Storage / RAM / Network / GPU / 이미지(OS)
                리소스 할당 : 하이퍼바이저에 의해 가상화 된 리소스를 VM 생성시 할당 하는 것


            리소스 관리 : 할당하고 회수하는 역할 / 중복되지 않도록 제공
            
            이미지 관리 : OS 이미지를 관리 하는 기능 / OS가 적용된 클라우드 자체 이미지도 생성 및 관리 기능

            네트워크 관리 : 클라우드 내에 사용되는 네트워크 리소스 관리 / 네트워크 설정을 위한 구성 요소 관리(라우터/서브넷 등)

            유저 관리 : 유저 정보 / 권한 설정 및 리소스 사용 정보 관리

            데이터 관리 : 클라우드에서 제공되는 데이터 자장 방식
                오브젝트 : 비정형 / 동영상 이미지 / RESTful
                블록 : 정형 / 파일시스템 공간 제공 / FC, iSCSI
                파일 : 정형 / 공유 디렉토리 / NFS, CIFS

    클라우드 동작 절차
        리소스 요청(USER) -> 리소스 할당 및 VM 생성(관리자) -> WEB / Terminal / APP 접속 / 사용


- 클라우드 구조 기술
    OpenStack : Iaas 형태의 클라우드 컴퓨팅 오픈 소스 프로젝트
        오픈스택 개요 : Austin / Bexar Cactus Diablo / Esse x / Folsom Grizzly

        Core Project : Nova
            API : HTTP 요청을 받아 코멘트로 변환하여 통신
            Scheduler : 어떤 호스트가 어떤 인스턴스를 관리할지 결정
            Network : ip 포워딩 / 브릿지 / Vlan 관리
            Compute : 하이퍼바이저와 VM간의 통신 관리
            Volum : 스토리지 관리

        Core Project : Swift
            오픈스택 오브젝트 스토리지로 비정형성 데이터를 저장하기 적합
            고유한 URL을 갖고 API로 제어
            저장 공간에 제약이 없음

        Core Project : Cinder(block Storage)
            저장 공간을 생성 및 삭제 / 인스턴스에 연결할 수 있는 기능을 제공
        
        Core Project : Glance
            운영체제 이미지를 관리
            glance-api로 이미지를 등록, 삭제 및 관리

        Core Project : Keystone
            리소스에 대한 인증관리 / 물리 서버내의 자원을 사용할 수 있도록 관리

        Core Project : Horizon
            오픈소스 대시보드 서비스

        Core Project : Neutron
            SDN 개념에 따른 네트워크 프로젝트

    Docker : 오픈 소스 프로젝트
        컨테이너 기반의 오픈소스 가상화 플랫폼
        컨테이너 괸리를 위한 추가적인 기능 제공 및 관리의 편의성을 높임

        컨테이너 : 단일 HOST OS 위에서 여러 개의 프로세스가 고립된 공간에서 동작하는 구조 / 사용자 공간
        커널 : 물리적 자원을 관리하는 공간

        프로세스만 동작 시키는 구조 생성, 시작, 종료가 빠름
        하나의 OS에서 동작 하기 때문에 자원을 효율적으로 사용
        이식성이 높음

        !컨테이너 커널을 HOST OS와 공유해야 하기 때문에 종속적임
        !컨테이너별 커널 구성 불가


        컨테이너 VS VM
            하이퍼바이저 (X/O)
            Guest OS (X/O)
            커널 자원 분리 (X/O)
            시작 및 종료 시간 (빠름/느림)
            자원 효율성 (높음/낮음)

        Docker Server & Client 
            Server : Host machine에서 컨테이너를 관리하고 실행하는 데몬 / 사용자와 Client를 통해 연결됨
            Client : Docker와 사용자 간 인터페이스 제공 / 사용자의 명령을 받아 Docker Server(Daemon)으로 전달


    Kubernetes : 오픈스택과 동일한 역할
        쿠버네티스는 컨테이너화 된 응용 프로그램의 배포, 확장 및 관리를 자동화 하는 오픈 소스 시스템


    Micro Service : 서비스를 세분화하여 따로 분류하고 연결하는 구조
        분산되어 있어 장애 시 관리에 좋음
        새로운 기능 추가 구조 변겨 등에 좋음
        기능 단위로 되어 있어 분산 작업 가능
        !배포의 복잡성(기능의 개별 구성)
        !각 기능 간의 인터페이스 네트워크 고려
        !데이터 관리의 복잡성

    Serverless Computing
        개발자가 직접 서버를 관리할 필요 없이 기능 단위의 마이크로서비스를 구성하여 애플리케이션을 개발할 수 있는 컴퓨팅 환경
        BaaS : 서비스형 서버리스 : 다양한 기능을 제공하는 형태
        FaaS : 사용자가 작성한 코드를 업로드하고 (기능단위) 서버 요청 시 동작하는 형태

        비용이 효율적 / 구축이 용이 / 리소스 효율 / 인프라 구축 필요가 없다
        !벤더 종속성이 높음 / 지속적인 서비스에 용이 하지 않음 / 디버깅 어려움
## elice cloudtrack - [3기-17] ##

# 보안

- 보안 : 승인되지 않은 액세스로부터 보호하는 프로세스
    인증 : 사용자의 신원을 검증하는 프로세스 / ID 토큰
    인증 방식 : 비밀번호 / 일회용 핀 / 인증 앱 / 생체 인식

    인가 : 인증된 사용자가 어떤 자원에 접근(권한)할 수 있는지를 확인하는 프로세스 / 액세스 토큰

    필요성 : 민감한 정보와 시스템 보호 / 보안 정책 및 규정 준수

    암호 기법 구조 
        평문 ----암호화----> 암호문
        암호문 ----복호화----> 평문


- 해시 : 단방향 암호화 기법으로 해시함수를 이용하여 고정된 길이의 암호화된 문자열로 바꿔버리는 것
    해시함수 : 임의의 길이의 데이터를 고정된 길이의 데이터로 매핑하는 함수
    해시값 : 매핑 후 데이터의 값
    키 : 매핑 전 데이터의 값
    해싱 : 매핑하는 과정

    해시함수 종류
        암호화 해시함수 : 해시값을 가지고 입력값을 알아내기 어렵다는 점을 이용하여 암호학적 원리기반 단방향성, 복호 불가 기능을 이용함
            MD5 / SHA / MAC
            SHA : 서로 관련된 암호학적 해시함수 등의 모음

            특징 : 단방향 암호화 / 충돌 저항성 / 제1 역상 저항성 / 제2 역상 저항성
            효과 : 압축 효과 - 무결성 보장 / 눈사태 효과 - 작은 변화로도 전혀다른 결과값을 도출
            
        비암호화 해시함수 : 동일한 해시값을 갖는 서로 다른 입력값을 존재하지 않는다는 해시함수의 성질을 이용하여 입력값에 대한 무결성 검증용
            CRC / Checksum


- 쿠키 : 서버에서 사용자 브라우저로 전송하는 작은 데이터
    클라이언트에 저장 / 이름, 값, 만료날짜, 경로 정보가 들어있음 / 웹 브라우저가 종료되면 삭제

    기존 로그인 정보 사용으로 추가적인 데이터저장이 필요 없음
    사용자 로컬에 저장되는 만큼 서버와의 통신하는 과정을 없애 속도가 빠름
    !보안상의 문제 / 용량의 제함 /브라우저 간의 공유 불가

    종류 : 세션쿠키 - 브라우저에 저장 / 영구 쿠기 - 하드디스크에 저장
    동작원리 : HTTP 요청(클라이언트) -> 쿠키를 HTTP 헤더에 담아 응답(서버) -> 쿠키 저장 / HTTP 재요청(클라이언트) -> 응답(서버)


- 세션 : 웹 사이트의 여러 페이지에 걸쳐 사용되는 사용자 정보를 저장하는 방법
    특징 : 웹 서버에 웹 컨테이너의 상태를 유지하기 위한 정보 저장 / 웹 서버에 저장되는 쿠키 / Session ID 부여

    쿠키에 비해 안전 / 자동 로그인
    !쿠키에 비해 속도 느림 / 서버의 자원을 사용하기 때문에 속도 저하나 서버에 부하를 줄 수 있음

    동작원리 : HTTP 요청(클라이언트) -> 세션 ID 생성(서버) -> 쿠키를 HTTP 헤더에 담아 응답(서버) -> 세션 쿠키 저장(클라이언트) -> HTTP 재요청(클라이언트) 
        -> 클라이언트 인증(서버) -> 응답(서버)


- 토큰 : 서버가 각각의 클라이언트를 구분하기 위한 암호화 데이터
    연결형 / 비접촉형 / 분리형

    인증 절차 : 요청 / 확인 / 토큰 / 저장


- JWT : Json Web Token : Json 데이터형식의 토큰
    JWT를 HTTP 헤더에 실어 식별하는 방식
    구성요소 : 헤더 / 내용 / 서명
        헤더 : JWT에서 사용할 타입과 해시 알고리즘의 종류가 담겨 있음
        내용(페이로드) : 서버에서 첨부한 사용자 권한 정보와 데이터가 담겨있음
        서명(시그니처) : 개인키로 서명한 전자서명이 담겨있음

    Json 코드언어로 생성된 토큰이기 떄문에 용량이 작어 두 엔티티 사이에서 매우 빠르게 전달
    서버에서 토큰을 확인할 필요가 없음
    액세스 가능한 데이터, 권한 지속 시간, 로그인 시 가능한 작업을 지정할 수 있음
    !키 유출 시 시스템 전체가 위험에 노출됨

    동작원리 : 사용자 로그인(사용자) -> 사용자 확인(서버와 DB) -> JWT 발급(서버) -> 응답(서버) -> 데이터 요청(사용자) -> 접근 토큰 검증(서버) -> 응답(서버)

    Refresh Token : Access Token의 시간은 짧게하고 Refresh Token의 시간은 길게하여 Access Token이 만료되어도 서버에게 새로운 토큰을 발급하도록 함


- 캐시 : 자주 필요한 데이터나 값의 복사본을 일시적으로 저장, 보관하는 곳에 접근하는 방식 / 사용자가 직접 제거 / 웹 페이지의 요소(이미지,오디오,비디오 등) 저장
    특징 : IOPS 증가 / 데이터베이스 비용 절감 / 애플리케이션 선능 개선 / 백엔드 로드 감소

    캐싱 : 작업의 결과를 저장해서 시간과 비용을 필요로 회피하는 기법
        RAM과 같이 빠르게 액세스할 수 있는 하드웨어에 저장됨 / 데이터 검색 성능을 높이는 것
    
    CDN : 고용량 데이터를 안정적으로 전송해주는 기술
    글로벌 범위의 장거리 웹 사이트 로딩 속도 개선과 안정적인 콘첸츠 제공이 가능
    호스팅에 대한 비용 절감
    !특정 타깃으로 운영하는 웹 서비스일 경우 오히려 성능 저하를 불러올 수 있음
    활용 : 콘첸츠 캐시 서버 / 클라우드 스토리지 / 멀티미디어 스트리밍



# Docker

- Docker : 컨터이너로 환경을 관리할 수 있는 프로그램 / 개발과 운영 환경의 일과성을 유지하기 위해서 사용
    서버의 확장이 쉽고 내리기도 쉽다

    docker images : 설치된 image의 목록 확인
    docker rmi <image_name>: image를 제거
    docker ps : 실행중인 컨테이너 목록 확인
    docker container ls -a : 모든 컨테이너 목록 확인
    docker container rm <contatiner_id> : 컨테이너 아이디를 통해 삭제
    docker run -p 81:80 nginx : 포트번호 81으로 nginx 서버를 실행 시킴
    docker run -d -p 81:80 nginx : 포트번호 81으로 nginx 서버를 데몬으로 실행 시킴
    docker kill <container_id> : 컨테이너 아이디를 통해 서버를 내림
   

- Flask : 웹 개발을 위한 파이썬 가상환경(mac)
    python3 -m venv venv : venv 설치
    source venv/bin/activate : venv 실행
    pip freeze : 설치한 환경 목록
    pip install flask : flask 설치
    python3 app.py : app.py파일 실행 


- Dockerfile
    FROM python : 어떤 리눅스를 사용할 지
    COPY . /app : 현재 디렉토리에 있는 모든 파일을 /app에 복사 
    WORKDIR /app : 컨테이너에서 명령어가 실행되는 디렉토리
    RUN pip3 install flask
    RUN chomd +x /app/app.py : RUN은 컨테이너를 구성할 파일을 만들 때
    CMD ["python3", "app.py"] : 컨테이너가 실행된 후에 실행할 명령어

    docker build -t flask-app . : flask-app image를 생성
    docker run -d -p 8080:8000 flask-app : flask-app 을 로컬 8080로 띄움


# AWS
    인스턴스 생성
    t2.micro

- PuTTY : EC2에 SSH 접속을 위해 필요한 프로그램
    MAC = ./ssh ssh -i ".pem" ubuntu@~
## elice cloudtrack - [3기-17] ##

# 운영체제 소개

- 하드웨어 :
    cpu : 중앙 처리 장치 / 데이터와 명령어를 처리하는 제어 장치 / 주 기억장치인 메모리에 위치
    메모리 : cpu가 처리할 데이터와 멸령어를 저장하는 장치 / 주소를 참조하여 데이터를 찾음 / 전원이 차단되면 내용이 삭제
    주변장치 : 입력, 출력, 보조기억 장치

- 운영체제의 개념 :
    운영체제 : 하드웨어를 포함한 리소스를 제어하고 프로그램을 실행해주는 시스템 소프트웨어
    리소스 : 시스템 자원 - 메모리의 용량, 다른 프로그램의 리소스를 강제로 사용할 수 없다.

- 운영체제의 기능 : 프로그램이 잘 실행될 수 있도록 도와주는 소프트웨어
    프로세스 관리 : 실행 중인 프로그램
        리로스 관리 / 프로레스 상태관리 / 멀티 프로세싱
    메모리 관리 : cpu에서 실행될 수 있도록 메모리에 정보를 올리거나 내림
        메모리 관리 / 가상 메모리
    파일 시스템 관리 : 어떤 방식을 사용하던지 프로그램에서 고민하지 않고 읽고 쓰게 해주는 기능 / 저장장치에 파일을 읽고 쓰는 방법
    네트워크 관리 : 프로토콜을 지원하여 통신이 가능하도록 함

- 운영체제의 종류 :
    윈도우 / 맥(유닉스 기반) / 리눅스(오픈소스)
    
    컨테이너화 - 도커 : 
        실행에 필요한 모든 환경과 패키지를 포함하여 하나로 묶는 기술
        운영체제에 상관없이 동일한 환경에서 개발할 수 있음


# 프로세스

- 프로세스 : 실행 중인 프로그램 
    프로그램 : 특정 작업을 수행하는 명령어들의 모음
    스레드 : 프로세스 안에서 실행되는 흐름 단위

- 프로세스 vs 스레드 :
    프로세스 : 독립적인 메모리를 할당 받음
    스레드 : 프로세스 속에 있는 것이라서 프로세스가 받은 메모리를 공유

- 프로세스 구조 : 
    스택 / 힙 / 데이터 / 코드
    
    코드 : 컴파일된 코드가 들어가는 영역으로 읽기 전용 영역 / cpu가 실행하게 될 명령어들이 저장됨
    데이터 : 전역 변수와 정적 변수들을 위한 공간 / 프로그램 시작과 함께 할당, 종료 시 소멸
    힙 : 동적 메모리 할당을 위해 사용되는 메모리 / 사용자가 직접 관리 가능 !메모리 누수
    스택 : 함수의 호출과 관련된 지역 변수와 매개변수가 저정됨 / 함수의 호출과 함께 할당, 완료 시 소멸 / 생성되는 임시 데이터 저장
        데이터를 저장하는 선형 자료구조 / push, pop / 후입 선출(LIFO) 방식

- 프로세스의 상태 :
    생성 / 준비 / 실행 / 대기 / 종료
    
    생성 : 메모리에 로드되지 않은 상태 / 준비 상태로의 승인을 기다리는 단계 / 리소스가 부족하면 오랜 시간 대기
    준비 : cpu를 사용하고 있지는 않지만, 언제든 실행 될 수 있도록 대기하는 상태 / 우선순위에 따라서 실행 상태로 전이함
    실행 : cpu가 할당되어 프로세스의 명령어들을 처리해주는 단계 / 동시에 처리하려면 다시 준비상태로 전환
    대기 : 프로세스가 특정 자원이나 이벤트를 기다리는 상태 / 이벤트가 완료되면 준비 상태로 옮겨와서 계속해서 실행
    종료 : 모든 명령어가 완료된 상태 / 부모,자식 프로세스 / 종료 상태가 끝나면 프로세스가 메모리에서 삭제됨

- 멀티 프로세싱 :
    여러 개의 프로세스를 돌아가면서 조금씩 처리
    한 프로세스 내에서 자원을 공유하면서 여러 작업을 처리
    !하나의 스레드가 문제가 생기면 프로세스 전체가 종료될 수 있음
        멀티 스레드 : 하나의 프로세스는 여러 스레드를 가진다. 
    프로세스간 통신(IPC) :
        다른 프로세스의 리소스는 절대 침범하면 안됨
        운영체제가 허용하는 방법내에서 데이터를 주고 받는 방법들
            메시지 큐 / 공유 메모리 / 소켓

            메시지 큐 : 데이터를 넣어두고 다른 프로세스들이 사용할 수 있게 하는 방법 (공유 보관함)
            공유 메모리 : 프로세스의 메모리 일부를 공유 메모리로 만들어 다른 프로레스와 공유 / !충돌할 위험이 있음 (하숙집)
            소켓 : 다른 네트워크에 있는 프로세스와도 통신할 수 있는 소켓 통신을 이용 / 데이터를 주고 받는 양방향 통신

- 프로세스 스케줄링 :
    대기 시간은 가능한 최소화 
    가능한 공평하게 프로세슬르 처리하는 것이 목적
    선입선처리 / 최단 작업 우선 / 라운드 로빈

    선입선처리 : 가장 먼저 도착한 프로세스부터 순서대로 처리하는 방법
    최단 작업 우선 : 작업 시간이 적은 프로레스부터 처리하는 방식 / !기아
    라운드 로빈 : 일정 시간을 정해두고 시간이 지나면 대기열의 맨 뒤로 보내고 다음 작업을 처리하는 방법 / 실시간 시스템에 유리 / !프로세스 간의 전환이 많이짐

- 교착상태와 기아상태
    교착상태 :
        프로세스가 서로 상대방의 작업이 끝나기 많을 기다리는 상태
        상호배제 / 점유대기 / 비선점 / 순환대기
        위 조건이 모두 만족해야 교착상태가 발생 / 하나라도 막는다면 교착상태를 예방할 수 있음

        교착상태 해결 : 은행원 알고리즘 / 교착상태 무시 / 프로세스 종료 - 완벽한 방법은 없음

    기아상태 : 프로세스의 우선순위가 낮아 원하는 자원을 계속 받지 못하는 상태
        우선순위를 수시로 변경하여 계속해서 낮은 우선순위를 가진 프로레스가 없도록함
        오래 기다린 프로세스의 우선순위를 높이기
        우선순위가 아닌 순서대로 처리


# 메모리

- 메모리 관리 : 메모리를 할당하고, 해제하는 작업 / 리소스를 보호 / 여러 프로세스가 동시에 실행될 수 있도록 메모리 공간을 제공해야함
    메모리 주소 / 메모리 할당 / 메모리 해제

    연속 할당 : 한 손님이게는 연속된 방번호로 방을 주기
        고정 분할 방식 : 미리 방을 고정된 길이로 나눠 놓고 손님에게 주는 방식
            외부 단편화 : 규칙 때문에 방을 줄 수 없는 상태
            내부 단편화 : 할당은 해주었지만 사용하지 않고 남는 공간이 발생
        가변 분할 방식 : 손님마다 다른 방 길이를 받도록 하는 방식
            내부 단편화 발생하지 않는다
            외부 단편화는 여전히 발생할 수 있음
    불연속 할당 : 방 번호에 상관없이 제공

- 가상 메모리 :
    실제 물리적 주소가 아닌 가상의 주소인 논리적인 주소를 프로세스가 사용
    
    1. 모든 프로세스가 고정된 주소를 가질 수 있도록한다.
    2. 실제 물리적인 주소는 운영체제만 접근할 수 있어 리소스를 보호한다.
    3. 보조 기억 장치 일부를 메모리처럼 사용할 수 있도록 한다.

    가상 메모리의 페이지와 물리 메모리를 매핑하는 표를 유지(바인딩)

- 페이징 : 물리적 메모리와 가상 주소를 연결하는 단위
    페이지 테이블 : 가상 메모리의 페이지와 물리 메모리를 매핑하는 표
    스와핑 : 안 쓰는 프로세스는 잠시 하드 디스크에 넣어두기
    프로세스 스와핑 : 프로세스를 보조 장치에 저장 / 요즘 사용 x
    요구 페이징 : 페이지 단위로 스와핑하여 당장 필요한 페이지만 메모리에 남겨두는 방법 / 실제 물리메모리를 하드 디스크의 캐시로 사용하는 기법
    캐시 : 데이터나 값을 미리 복사해놓는 임시 장소 / 필요한 내용만 빠르게 확인
    !일정한 크기로 자르기 때문에 내부 단편화가 발생

- 세그멘테이션 : 논리적으로 같은 역할을 하는 부분끼리 자르는 방법
    중요한 부분과 아닌 부분을 분리하여 저장
    
    1. 중요한 부분과 그렇지 않은 부분을 분리할 수 있어서 효율적
    2. 중복된 내용을 없ㅇㄹ 수 있음
    3. 내부 단편화 해결

    !길이가 다르게 자르기 때문에 외부 단편화가 발생

- 페이징 + 세그멘테이션 : 부위별로 먼저 나눈 다음 각 부위를 일정 크기대로 자름
    세그멘트를 페이징 기법으로 나누는 방법
    세그멘트를 통해 내부단편화를 방지하고 페이징 기법으로 외부 단편화를 방지할 수 있음
    !조금 느려질 수 있음


# 파일 시스템

- 파일 : 컴퓨터에서 정보를 담는 논리적인 저장 단위(비휘발성)

- 파일 시스템 : 파일들을 쉽게 접근할 수 있도록 관리하는 체제

- 디스크 할당 :
    하드 디스크 : 프래터 사이사이에 정보를 읽고 쓸 수 있는 헤드가 들어가 있음
        트랙 : 플래터에서 띠 모양을 영역
        섹터 ㅣ 하드 디스크의 최소 단위
    SSD : 전기 장치로만 저장

    파일 할당 : 하드 디스크는 블록이라는 단위로 나누어 번호를 붙임
        연속 할당 : 
            앞에서 부터 차례대로 데이터를 입력하는 방식 
            헤드의 이동을 최소화하여 입출력 속도가 빠름
            순차 접근과 직접 접근이 모두 가능
            !외부 단편화 발생

        연결 할당 :
            연결 리스트 : 데이터와 다음을 가리키는 포인터로 구성되어 한 줄로 연결된 자료구조 / 길이가 변하는 데이터에 적합

            연결리스트와 같은 방식으로 파일을 할당
            외부 단편화 문제가 없다
            !헤드가 여러번 움직여야한다 / 직접 접근이 불가능 / 손상 시 취약

        FAT 방식 : 화살표들을 모아서 하나의 표로 저장해두자
            손상되어도 FAT를 보면 다음 칸이 어디인지 알 수 있음
            !최대 파일 크기와 파티션의 크기가 제한됨

        색인 할당 :
            번호들을 순서대로 한 칸에 기록 (인덱스 블록)
            외부 단편화가 발생하지 않음
            !파일마다 한 칸씩 낭비, 큰 파일은 저장할 수 없음(상한선)

- 링크 :
    리눅스의 inode : 파일에 대한 모든 정보가 기록 / 노드에 번호를 부여

    심볼릭 링크 : 바로가기 기능과 유사함
        원본파일이 삭제되거나 경로가 변하면 링크가 끊어짐
        수정 시 원본 파일의 내용이 동일하게 수정
        별도의 inode를 가짐

    하드 링크 : 
        원본파일이 삭제되어도 링크가 끊어지지 않음
        수정 시 원본 파일의 내용이 동일하게 수정
        원본파일의 inode를 공유

    링크 활용방법
        대량의 데이터를 복사하는 대신 링크로 참조하여 사용
        
- 마운트 : 물리적인 장치를 특정 디렉토리에 연결하는 것
    마운트를 해야 운영체제가 저장 장치를 인식하여 접근이 가능

## elice cloudtrack - [3기-11-02] ##

# 의존관계

- IoC : 프로그래밍의 전통적인 제어 흐름 구조를 반전시키는 디자인 원칙
    장점 : 모듈 간의 낮은 결합도 / 코드 유지 관리 / 테스트 용이성
    IoC의 구현 - DI : 객체가 필요로 하는 의존성을 주입 받는다.
    Spring 프레임워크 : 컨테이너는 객체의 생명주기를 관리

- DI : 객체 지향 프로그래밍에서 의존성을 관리하는 기술
    1. 결합도 감소
    2. 재사용성
    3. 테스트 용이성(mock)
    DI의 구현 : 생성자 주입 / Setter 주입 / 메소드 주입
    Spring 프레임워크 : DI를 핵심 원칙으로 채택 / @Autowired

- Spring에서의 Bean 관리
    Bean : Spring 컨테이너에 의해 관리되는 객체 
        생명주기 : 여러 단계로 구성 / 생성 ~ 소멸 / 싱글톤(인스턴스가 오직 1개만 생성되는 디자인 패턴)
            1. 인스턴스화
            2. 초기화
            3. 사용
            4. 소멸 
            생명주기의 커스텀 처리 : 특정 단계에서 사용자 정의 동작 허용 / 각 단계에서 메서드를 통해 다양한 동작을 할 수 있다.
            생명주기 관리의 필요성 : 애플리케이션의 안정성 및 성능 향상 / 리소스 관리

- 다양한 의존성 주입
    의존성주입(DI) : 객체 사이의 의존 관계를 외부에서 주입하느 디자인 패턴
    IoC 컨테이너를 통해 다양한 방법으로 의존성 주입
        Setter 주입 : 선택적으로 의존성이 주입에 적합
        생성자 주입 : 객체의 불변성을 보장 / 순환 의존성 문제 발견할 수 있음 / 주로 사용
        필드 주입 : 어노테이션으로 주입하는 방법 / 테스트 확장성에서의 제한 사항 발생
        메서드 주입 : 동적으로 의존성을 주입받을 때 활용

- 생성자 주입의 필요성
    생성자 주입 : 객체 생성 시점에 의존성을 주입
    장점 : 불변성 - 시스템 안정성 향상 
          명시성 - 필요로하는 의존성을 명확히 알 수 있음 
          테스트 용이성 - Mock 객체로 쉽게 교체 가능 
          순환의존성 감지 - 에러로 발생

# Spring Container

- Spring Container
    1. 객체 생성 및 관리
    2. 의존성 관리
        BeanFactory : 기본적인 기능 <-> ApplicationContext : 확장된 기능

        ApplicationContext : 확장된 기능 / 즉시 로딩 / 주로 사용

- Spring Framework 구조
    1. 경량 컨테이너 
    2. 모듈화

    구성 요소 : Core Container / AOP / Data Access / Web MVC Framework

- Servlet : Java 기반의 서버 측 Component / Tomcat
        클라이언트의 요청 치리 및 응답 반환
    1. 서버 로직처리
    2. 복잡한 작업 수행
    3. 성능 및 보안 향상

    Dispatcher Servlet : Spring MVC에서 사용하는 Servlet
        요청을 분석하여 적잘한 핸들러에 전달

- Bean의 Scope
    1. 성능 관리
    2. 상태 관리
    3. 웹 애플리케이션 특성

    - Singleton Scope / @Scope("singleton")
        1. 메모리 효율성
        2. 공유 상태 관리
        3. 애플리케이션 적용
        => 애플레케이션 공통적으로 사용되는 객체에 적합

    - Prototype Scope / @Scope("prototype")
        1. 새로운 인스턴스 생성
        2. 독립적인 상태 관리
        3. 개별적인 생명주기
        => 각 요청마다 매번 다른 인스턴스가 필요 시 적합

    - Request Scope / @Scope("request")
        1. 요창 당 하나의 인스턴스
        2. 요청과 동일한 수명
        3. 웹 애플리케이션 효율성 상승
        => 사용자의 요청정보를 저장하는데 적합

    - Session Scope / @Scope("session")
        1. 세션당 하나의 인스턴스
        2. 세션과 동일한 생명
        3. 개별 사용자 데이터
        => 사용자의 정보, 프로필을 저장할 때 적합

    - Global Session Scope / @Scope("global-session")
        1. 전역적인 세션 관리
        2. 클러스터 환경
        => 분산 환경에서 세션을 공유하는데 적합

- Bean의 생명주기
    인스턴스화 / 초기화 / 사용 / 소멸
    Bean의 생성과 소멸을 제어하여 리소스를 효율적으로 관리

    - 생성 단계 :
        컨테이너에서 생성된 빈을 메모리에 저장하는 단계
            1. 정확한 구성
            2. 유연한 구조

    - 사용 단계 :
        서비스를 제공하는 단계 / 성능 최적화
            1. Scope 관리 - 생명 주기
            2. 상태 관리
                stateful -> 동시성
                stateless -> 재사용성

    - BeanFactory vs ApplicationContext
        BeanFactory : 지연 로딩 / 필요시에만
        ApplicationContext : 즉시 로딩 / 앱 시작 시 미리 로드하여 초기화

    실제 앱에서의 적용 : 
        1. 웹 / @Controller
        2. 배치 프로세싱 / @Job
        3. 데이터베이스 연결 / @Entity

    



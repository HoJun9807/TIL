## elice cloudtrack - [3기-12] ##

# 예외처리

- 필요성
    재고 부족 시 예외처리를 하지 않는 경우
        재고 부족에 대한 로그만 남긴다면 고객은 정확한 처리과정을 알 수 없다.

    예외 : 일반적인 실행의 흐름을 바꾸는 몇 가지 상황
    예외 처리 : 예외를 처리하도록 설계한 프로그래밍 기법

    Error vs Exception
        Error : 시스템 수준에서 발생하는 치명적인 문제
        Exception : 프로그램 수준에서 발생하는 문제

    Exception
        Checked Exception : 명시적 예외처리가 필요
        Unchecked Exception : Runtime 단계에서 예외가 발생

    중요성 : 안정성 강화 / 문제에 대한 정확한 정보 제공 / 프로그램의 유연성 향상 / 사용자 경험 향상


- 예외처리 전략 : 프로그램에서 발생하는 예외 상황을 어떻게 처리할지를 결졍하는 방법
    1. 비즈니스 로직의 예외 상황을 분석하자
        명확히 이해할 수 있게 비즈니스 로직을 분석해야 한다.
    2. 적절한 예외 타입을 활용하자
        표준 라이브러리의 예외 타입
        직접 예외 클래스 개발
    3. 예외를 던지고, 처리할 위치를 선정하자
        throws로 처리할지, try-catch 블록을 사용할지 고려
        throws : 예외가 발생한 시점에서 예외 처리를 강제한다.

        try-catch-finally : 예외를 처리하고 프로그램의 실행을 계속할 수 있도록 유도
    4. 발생한 예외 메시지를 명확하게 작성하자
    5. 복구 전략을 수립하자
    6. 로깅과 모니터링을 하자


# Spring AOP
    애플리케이션에서 공통 기능을 모듈화해주는 기술

    - Advice 어노테이션
        @Around / @Before / @AfterThrowing / @After / @AfterReturning

    Pointcut : Advice가 적용될 위치를 선별하는 기능
        지시자 : execution, annotation

    @ControllerAdivce : 복구 범위가 전범위 영역인 예외처리

    - Aspect를 이용한 각종 예외상황 대응
    
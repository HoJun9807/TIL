## elice cloudtrack - [3기-11] ##

# REST API

- Rest API?
    효율적인 통신 데이터 교환
        RESTful 원칙
        1. 자원 지향 아키텍쳐 / URI
        2. 무상태성(stateless) / 확장성
        3. 캐시 가능한 / 성능
        4. 계층화된 시스템 / 보안강화
        5. Code on Demand / (선택)
            => 효율성, 확장성

    1. 의존성 관리
    2. 보안과 테스트
    3. 다양항 프로젝트 지원

    - HTTP 메서드 활용한 RESTful API 인터페이스 제공
    - URI 설계 원칙 : 간결성 / 명확성, 확장 가능성
    - 상태코드 : 1xx - 정보 / 2xx - 성공 / 3xx - 리디렉션 / 4xx - 클라이언트 오류 / 5xx - 서버 오류
        => 해당 코드 발생으로 오류를 찾고 해결할 수 있다

    장점 : 간결성 / 확장성
    단점 : 데이터 중복 전송 / 세션 관리

- HTTP 프로토콜
    HTTP : 웹에서 정보를 교환하는 방식 / 비연결성 => 효율성 증가 / 보안에 주의 필요
        작동 원리 : 서버와 클라이언트 사이에서 정보를 무상태성으로 요청과 응답

    요청 메시지 구조 : 메소드 / URI / 헤더 / 본문
    응답 메시지 구조 : 상태 코드 / 헤더 / 본문

    HTTPS : HTTP에 데이터 암호화를 추가하여 보안을 강화

- CRUD와 HTTP 메소드
    설계 원칙 : 간결성 / 명확성 / 일관된 패턴

    JSON : 데이터를 클라이언트와 서버간의 전송하는 주요 방법
        1. 가독성
        2. 언어 독립적

    HATEOAS : 하이퍼미디어(링크 : URI)를 포함하는 것

    로깅과 모니터링으로 오류의 문제의 원인을 찾고 해결할 수 있기 떄문에 중요하다.

    - API 보안
        OAuth : 서비스 간 인증 및 권한 부여 / 사용자 정보 토큰 사용
        
        인증 방식 : 기본 인증 / 토큰 기반 / OAuth

        SSL/TLS를 통한 데이터 전송 보안
            클라이언트와 서버 간의 안정성 보장 / 서버 인증서 사용
        
        API 키 관리 : 안전한 보관 / 안전한 배포 / 지속적인 관리
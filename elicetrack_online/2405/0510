## elice cloudtrack - [3기-10-04] ##

# 데이터베이스 심화

- 정규화 : 데이터 중복 최소화
- 인덱스 : 데이터의 빠른 검색
- 샤딩 : 대규모 데이터 분산 전략
- 트랜잭션 : 여러 작업의 논리적 단위
- n+1 문제


- 정규화 : 중복과 무결성 문제를 해결하기 위한 설계 기법
    1. 중복 제거
    2. 무결성 확보
    3. 확장성 및 유지 보수

    정규형 : 특정 조건을 만족하는 정규화가 완료된 결과
        과도한 정규화 -> 성능 저하
        역정규화 -> 성능 향상 but,무결성을 보장하지 못 할 수 있음.

- 인덱스 : 데이터 검색의 속도를 높이기 위해 사용 / 적절한 인덱스 잔략으로 최적화
    1. 데이터 검색 속도 향상 --> but,데이터 작업 성능 저하
    2. 쿼리 성능 향상 --> but,공간 추가 사용
        B-tree / 해시 / Full Text

- 샤딩 : 대규모 데이터가 일관성을 유지하여 분산 / DB를 샤드로 분리하여 관리
    1. 데이터베이스 확장
    2. 성능과 가용성
        수평 샤딩 / 수직 샤딩
        1. 스케일 아웃
        2. 고가용성
        3. 로컬화된 쿼리
            주의점 : 샤딩 키 선택 / 복잡한 쿼리의 어려움 / 데이터 재분배

- 트랜잭션 : 여러 작업의 논리적 단위
    1. 데이터 무결성
    2. 동시성 제어
        특징 : (ACID) 원자성 / 일관성 / 독립성 / 지속성 

- N+1 문제 : 비효율적인 쿼리가 발생하는 현상
    해결방법
        1. Fetch Join
        2. Batch Size
        3. Lazy Loading



# 유효성 검사

- 유효성 검사 : 규칙에 따라 데이터를 검증하는 과정
    1. 데이터 품질 보장
    2. 시스템 안정성 확보
    3. 보안 유지
        주의사항 : 클라이언트측 유효성 검사에 의존할 수 없음 / 서버에서 검증 로직 필요

- Spring Validation : @Validated
    데이터 정확성, 일관성, 안정성 보장
    1. 통합성
    2. 다양항 검증 규칙 제공
    3. 메시지 소스 통합
        주의사항 : 비스니스 로직에서의 검증 필요

- Spring Bean : IoC 컨테이너에서 관리되는 객체
    1. 생명주기 관리
    2. 의존성 주입
    3. 설정 및 환경 분리
    특징 : 싱글톤 패턴 / 생명주기 콜백 / 지연 로딩
    생성 방법 : XML기반, @어노테이션 기반, Java기반
        주의사항 : 모든 객체가 Bean일 필요는 없다

- Bean Validation : Java기반 앱에서 객체의 속성값을 검증하는 프레임워크
    1. 표준화된 접근
    2. 어노테이션 기반
    3. 커스터마이즈 가능
    특징 : 통합 / 자동 검증 / 오류 처리

- Spring Validation vs Bean Validation
    데이터 유효성을 검사하기 위한 두 방법
    Spring Validation 
        1. 프레임워크 특성
        2. Validator 인터페이스
        3. 유연성

    Bean Validation
        1. 표준 프레임워크
        2. 어노테이션 기반
        3. 커스터마이즈 가능

    차이점 :
        1. 통합 / 환경에 따라 선택
        2. 구현 방식 / interface vs 어노테이션
        3. 복잡도 / 복잡 Spring vs 간단 어노테이션



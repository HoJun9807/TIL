## elice cloudtrack - [3기-12] ##

# Spring Security

- 인증과 인가
    인증 : who? 누구
        인증 방법 : 비밀번호 / 2단계 인증 / 생체 인식 / 토큰 기반
    인가 : what? 권한
        인가 절차와 역할 : RBAC : 역할 기반 접근 제어 / ACL : 접근 제어 목록

    보안 개념과 원칙 : 기밀성 / 무결성 / 가용성 
    
    암호화와 보안 프로토콜

    접근 제어 메커니즘 : MAC / DAC / 세션 관리 

    보안 위협과 대응 전략 : 바이러스 / 트로이목마 / 랜섬웨어 / 피싱

- Spring Security
    인증 / 인가 / 보안

    구조 : 
        Authentication Manager : 인증 담당, 유효성 검사 - OAuth / JWT
        SecutituContext / SecutituContextHolder : 사용자 정보 저장 / 인증 정보 접근
        AccessDecision Manager : 특정 자원에 대한 접근 결정
        UserDetails Service : 사용자 정보 로드
        UsernamePassword AuthenticationFilter / JWT AuthenticationFilter : 인증 메커니즘 필터


# Cookie
    웹사이트가 사용자의 브라우저에 저장하는 작은 조각, 사용자 식별 / key와 value 쌍을 이룸
    세션관리 / 개인화 사용자 경험 / 추적 및 분석 / 타겟 광고

    - 작동 원리
        브라우저 <-> 쿠키 <-> 서버
        쿠키 : 클라이언트와 서버 간의 상태정보를 유지에 사용
        구조 :
            - 이름과 값
            - 유효 기간과 최대 수명
            - 도메인과 경로
            - 보안과 HTTPOnly
            - SameSite

        - 보안과 쿠키
            쿠키 도난(Cookie Theft) => HTTPS
            크로스 사이트 스크립팅(XSS) => HTTPOnly
            크로스 사이트 요청 위조(CSRF) => 토큰
            쿠키의 과도한 데이터 저장
            쿠키의 유효 기간 관리

    - 세션의 이해
        클라이언트 <-> 서버 <-> 데이터베이스
        고유한 세션 ID를 할당하여 상태 정보를 유지(Statefull)하고 사용자 식별하고 암호화하여 보안성을 높힐 수 있음

        쿠키 : 클라이언트 / 보안 취약
        세션 : 서버 / 보안 안전

        세션 사용
            사용자 인증 / 장바구니 관리 / 사용자 활동 추적 / 사용자 설정 유지

        
    - 쿠키와 세션
        데이터의 양과 종류 => 쿠키 - 간단 / 세션 - 민감한 정보
        보안 요구사항 
        사용자 경험
        세션의 유지 시간 => 세션 - 일시적

        쿠키의 장단점
            상태 유지 / 사용자 경험 개션 / 편리한 인증
            보안 취약성 / 크기제한(4KB) / 성능 영향

        세션의 장단점
            보안 / 데이터 용량 / 제어의 용이성
            서버 자원 사용 / 확장성 / 브라우저 호환성

        적용 예시
            쿠키 : 브라우징 선호도 / 기기 인증 정보, 로그인 간소화 / 로그인 기록, 사이트 탐색 설정 / 설정 저장
            세션 : 로그인 상태, 장바구니 정보 / 거래 세부 정보, 개인 금융 정보 / 타임라인, 메시지 및 알림 / 로그인 상태, 글 작성


# Spring Security와 쿠키/세션 관리
    CSRF 보호 / 세션 관리 / 보안 헤더 설정


# 보안의 중요성과 로그인 프로세스
    개인 정보 보호 / 금융 정보의 안정성 / 신뢰성 및 평판 유지 / 법적 책임 / 사이버 공격으로부터의 보호

    기본적인 로그인 프로세스 : 패스워드 입력 -> 서버 검증
        => 보안에 취약

    현대적인 로그인 프로세스 : 다중 인증 요소 / 단일 로그인(SSO) / OAuth / 생체 인식 기술 / 행동 인증
        => 강화된 보안 / 사용자 경험 개선 / 보안 유연성


# 토큰 기반 인증 시스템
    로그인 <-> 토큰 생성
    토큰 : 인증 / JWT / Stateless
        보안성 강화 / 확장성 및 유연성 / 접근 제어 및 권한 부여 / 단일 로그인 구현 용이
        사용자 인증 정보를 클라이언트 측에 저장하여 세션 관리의 필요성을 줄인다.

    - JWT : JSON Web Token
        구성요소 : 헤더 / 페이로드 / 서명
        특징 : 보안성 강화 / 확장성 및 호환성 / 효율적인 인증 및 권한 부여 / 자가 수용적 특성 / 단일 로그인 구현 용이성 / 디버깅과 테스팅의 용이성

# JWT를 활용한 로그인 시스템
    인증 프로세스 : 
        사용자 인증 단계
        JWT 생성 및 발급
        클라이언트 측 JWT 처리
        서버에서의 JWT 검증
        권한 부여 및 리소스 접근
        토큰 만료 및 갱신
        => 보안성이 높고 효율적

    1. 의존성 설정
    2. Spring Security Configuration
    3. JWT 생성 및 파싱 로직
    4. Custom 인증 필터
    
    - 토큰의 만료시간 중요

# JavaMail API
    Java 애플리케이션에서 이메일 전송 및 수신 기능 구현을 도와주는 API

    1. 의존성 설정
    2. 메일 세션 생성
    3. 메시지 객체 구성
    4. 이메일 전송
    5. 에러 처리 및 로깅
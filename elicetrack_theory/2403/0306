## elice cloudtrack - 0306 ##

# Java method
    - 함수(function)
        목적을 가진 명령어의 집합
        코드를 구조화 시키는 첫 단계
        입력과 출력

    - 메서드(method)
        접근 제한자 / 리턴 타입 / 리턴문 / 메서드명 / 매개 변수 / 메서드 본문 으로 기본적인 구조를 가진다.

# 객체 지향 프로그래밍(OOP)
    - 객체 : 구현하려는 대상 /요소 : 필드(데이터), 메서드(동작)
    - 클래스 : 객체를 추상화한 것 / 설계도
    - 인스턴스 : 클래스를 기반으로 만들어진 객체 / 실제 값

    - Solving the problem
        ex. 커피 한 잔 시키기
           커피를 고객이 주문하고 해당 주문을 점원이 바리스타에게 주문 내용(제작 커피)를 전달하는 과정 다시 바리스타가 점원에게 커피를 전달 점원이 고객에게 커피를 전달하고 다시 고객이 점원에게 돈을 전달하는 위 와 같은 모든 과정에서 볼 수 있다.

    - OOP의 장점
        1. 코드 재사용성
        2. 유지보수성
        3. 대규모 소프트웨어 관리
        4. 협업 용이성

    - OOP의 기본 원칙
        1. 캡슐화
        2. 상속
        3. 다형성
        4. 추상화

    - 클래스(class)
        추상화 작업을 통해 추상화된 객체를 추출할 때 특징들을 필드와 메서드로 분류 / 객체를 생성
            명사적 특징 -> 맴버 변수(필드) -> 데이터
            동사적 특징 -> 맴버 함수(메서드) -> 프로시저
        장점 : 코드의 재사용 / 데이터 추상화 / 캡슐화

    - 인스턴스(instrance)
        특정 클래스를 기반으로 만들어진 객체
        독립성 / 식별성(주소)

    - 은닉화(Encapsulation)
        객체 내부의 속성들을 외부로부터 숨기는 과정
        접근 제한자로 설정
        private설정 시 getter / setter 메소드로 접근 및 호출이 가능하다.
        다른 클래스에서의 접근을 막기 위해 private을 이용하고 같은 클래스 내의 public함수 내에서 호출 후 다른 클래스에서 사용 할 수 있다.

# Java 클래스 & 객체
    - 클래스 변수
        클래스의 모든 인스턴스가 해당 변수의 값을 공유
        static으로 선언
    
    - Scope : 변수의 접근 범위

    - 생성자(Constructor)
       객체가 생성 될 때 반드시 필요하다.
       생성자명은 클래스명과 동일해야 한다. 

    - this
        객체 입장에서 '나'를 의미
        다른 언어의 self
        인스턴스 변수와 다른 지역 변수를 구분하기 위해서 사용
        this(); 디폴트 생성자를 부르는 코드
## elice cloudtrack - 0318 ##

# Generic
    - 컬렉션, 람다식, 스트림, NIO에서 널리 사용된다.
    - 제네릭을 모르면 도큐먼트를 해석할 수 없다.
    - 이점 : 
        - 컴파일시 강한 타입 체크를 할 수 있다.
        - 타입 변환을 제거할 수 있다. <>안에 타입을 미리 강하게 명시하기
        때문에 
    
    - 제네릭 타입이란? :
        - 타입을 파라미터로 가지는 클래스와 인터페이스
            클래스 또는 인터페이스 이름 뒤에 <> 부호
        - 타입 파라미터
            일반적으로 대문자 알파벳 한문자로 표현
            구체적인 타입을 지정

        - 비제네릭 => Object타입을 사용하므로서 빈번한 타입 변환이 발생
                        -> 성능 저하
        - 제네릭 => 원하는 타입을 인스턴스 생성 시 구체적으로 선언해주기
        때문에 구체적인 클래스가 된다.

    - 멀티 타입 파라미터 :
        - 두 개 이상의 타입을 파라미터를 사용해서 선언할 수 있다.
            ex. class ex<T,M>{}

    - 제네릭 메소드 :
        선언 방법 : 리턴 타입 앞에 <T> 작성한다.
        리턴 타입과 매개변수에 사용한다.

        호출 방법
            ex. Box<Integer> box = boxing(100);

    - 제한된 타입 파라미터 : <T extends 상위타입>
        - 상속 및 구현 관계를 이용해서 타입을 제한
            타입 파라미터 경우 인터페이스를 상속해도 extends로 작성
        - 주의할 점 :
            - {}타입 파라미터 변수로 사용 가능한 것은 상위 타입의 멤버로
            제한된다.

    - 와일드카드 타입 :
        - 제네릭 타입을매개변수나 리턴타입으로 사용할 때 타입 파라미터를 제한

        - 타입 종류
            1. <?> : 제한없음
            2. <? extends 상위타입> : 상위 클래스
            3. <? super 하위타입> : 하위 클래스

    - 제네릭 타입의 상속과 구현 :
        - 제네릭 타입을 부모 클래스로 사용
            - 타입 파라미터는 자식 클래스에도 작성해야 한다.
                ex. public class aclass<T,M> extends A<T,M>{}
            - 추가적인 타입 파라미터를 가질 수 있다.
                ex. public class aclass<T,M,C> extends A<T,M>{}

        - 제네릭 인터페이스를 구현할 경우
            - 타입 파라미터는 구현 클래스에도 작성해야 한다.
                ex. public class AImpl<T> implemnets A<T>{}
        

# 컬렉션 플레임워크
    - 컬렉션 : 객체를 수집해서 저장하는 것
    - 배열의 문제점 : 
        - 저장할 수 있는 객체 수가 배열을 생성할 때 결정
        => 불특정 다수의 객체를 저장하기에는 문제발생
        - 객체를 삭제했을 때 해당 인덱스가 null이 됨
        => 객체를 저장하려면 어디가 비어있는지 확인해야 한다. / 비효율적
    - 컬렉션 프레임워크 : 객체들을 효율적으로 추가, 삭제, 검색할 수 있도록 제공
        - List : 배열과 유사하게 인덱스로 관리 / 표
            특징 : 순서를 유지하고 저장 / 객체 중복 저장 가능
                ex. ArrayList, Vector, LinkedList
        - Set : 집합과 유사 / 주머니
            특징 : 순서를 유지하지 않고 젖아 / 중복 저장 불가
                ex. HashSet, TreeSet
        - Map : 키와 값을 쌍으로 관리
            특징 : 키와 값의 쌍으로 이뤄짐 / 키는 중복 저장 불가
                ex. HashMap. Hashtable, TreeMap, Properties
        
    - List 컬렉션
        특징 : 인덱스로 관리 / 중복해서 객체를 저장할 수 있다.
        구현 클래스 :  ArrayList, Vector, LinkedList
        주요 메소드 : 
            - 객체 추가 : 
                - boolean add(E e) : 주어진 객체를 맨끝에 추가
                - void add(int index, E e) : 주어진 인덱스에 객체를 추가
                - set(int index, E e) : 주어진 인덱스에 저장된 객체를 변경
            - 객체 검색 :
                - boolean contains(Object o) : 주어진 객체가 저장되어 있는지 여부
                - .get(int index) : 주어진 인덱스에 저장된 객체를 리턴
                - isEmpty() : 컬렉션이 비어 있는지 조사
                - int size() : 저장되어있는 전체 객체수를 리턴
            - 객체 삭제 :
                - void clear() : 저장된 모든 객체를 삭제
                - .remove(int index) : 주어진 인덱스에 저장된 객체를 삭제
                - boolean remove(Object o) : 주어진 모든 객체를 삭제

        - ArrayList
            ex. List<E> list = new ArrayList<E>();
            - 저장 용량 : 초기 10 / 용량 지정 가능(int) / 저장 용량을 초과한 객체들이
            들어오면 자동적으로 늘어난다.
            - 객체 제거 : 바로 뒤 인덱스부터 마지막 인덱스까지 앞으로 1씩 당겨진다.

            - 고정된 객체들로 구성된 List 생성 :
                ex. List<T> list =  Arrays.asList(T...z);
        
        - Vector
            ex. List<E> list = new Vector<E>();
            - 특징 : 스레드 동기화가 되어있어 복수의 스레드가 동시에 접근해서 객체를
            추가,삭제해도 스레드가 안전하다.

        - LinkedList
            ex. List<E> list = new LinkedList<E>();
            - 특징 : 인접 참조를 링크해서 체인처럼 관리
        
    - Set 컬렉션
        특징 : 수학의 집합에 비유될 수 있다. / 저장 순서x / 객체 중복 x / 하나의 null
             : 인덱스로 객체를 검색해서 가져오는 메소드가 없다. => Iterator 제공
        구현 클래스 :  HashSet, LinkedHashSet, TreeSet
        주요 메서드:
            - 객체 추가 : 
                - boolean add(E e) : 주어진 객체를 저장 / 중복 여부에 따라 true /false
            - 객체 검사 : 
                - boolean contains(Object o) : 주어진 객체가 저장되어 있는지 여부
                - isEmpty() : 컬렉션이 비어 있는지 조사
                - Interator<E> iterator() : 저장된 객체를 한번씩 가져오는 반복자 리턴
                - int size() : 저장된 전체 객체수 리턴
            - 객체 삭제 :
                - void clear() : 저장된 모든 객체를 삭제
                - boolean remove(Object o) : 주어진 객체를 삭제

        
        - Iterator
            ex. Iterator<String> iterator = set.iterator();
            메서드 :
                - hasNext() : 가져올 객체가 있으면 true없으면 false
                - next() : 컬렉션에서 하나의 객체를 가져온다.
                - remove() : Set 컬렉션에서 객체를 제거
                ex. while(iterator.hasNext()){
                    String str = iterator.next();
                    if(str.equals("홍길동")){
                        iterator.remove();      // 삭제
                    }
                } => 저장된 객체수만큼 루핑

        - HashSet
            ex. Set<E> set = new HashSet<E>();
            특징 : 동일 객체 및 동등 객체는 중복 저장하지 않는다.

    - Map 컬렉션
        특징 : key와 value로 구성된 Map.Entry객체를 저장하는 구조
             : 키와 값 모두 객체
             : 값은 중복 저장 가능
        주요 메서드:
            - 객체 추가 :
                - V put(K key, V value) : 주어진 키와 값을 추가
            - 객체 검색 :
                - containsKey(Object key) : 주어진 키가 있는지 여부
                - containsValue(Object value) : 주어진 값이 있는지 여부
                - Set<Map.Entry<K,V>> entrySet() : 키와 값 쌍으로 구성된 모든 
                Map.Entry 객체를 Set에 담아서 리턴
                - V get(Object key) : 주어진 키의 value를 리턴
                - isEmpty() : 컬렉션이 비어있는지 여부
                - Set<K> keySet() : 모든 키를 Set객체에 담아서 리턴
                - int size() : 저장된 키의 총 수를 리턴
                - Collection<V> values() : 저장된 모든 값 Collection에 담아서 리턴
            - 객체 삭제 :
                - void clear() : 모든 Map.Entry를 삭제
                - V remove(Object key) : 주어진 키와 일치하는 Map.Entry 삭제

        - HashMap
            ex. Map<K, V> map = new HashMap(K, V)();
            특징 : 키 객체는 hashCode()와 equals()를 재정의해서 동등 객체가 될 조건
            을 정해야한다.
                : 키 타입은 String을 주로 사용

        - Hashtable
            ex. Map<K, V> map = new Hashtable(K, V)();
            특징 : 키 객체는 hashCode()와 equals()를 재정의해서 동등 객체가 될 조건
            을 정해야한다.
                 : 스레도 동기화가 되어 있기 때문에 객체를 추가, 삭제하여도 안전하다.
        - Properties
            ex. Properties properties = new Properties();
                properties.load(new FileReader("파일경로"));
                String value = properties.getProperty("key");
            특징 : 키와 값을 String타입으로 제한한 Map 컬렉션이다
                 : 프로퍼티 파일을 읽어 들일 때 주로 사용
                - 프로퍼티 파일 : 옵션 정보, 데이터 베이스 연결정보등의 텍스트파일

            
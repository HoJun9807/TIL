## elice cloudtrack - 0311 ##

# OOP의 특징
    1. 캡슐화 : 
        - 객체의 데이터와 메서드를 하나로 묶는 개념
        - 객체의 세부 구현을 숨기는 것이 목적
        - 외부에서의 접근을 막고 객체의 데이터와 메서드를 안전하게 보호
        - 멤버 변수를 private로 선언 시 getter와 setter메서드를 통해 접근

    2. 상속 :
        - Overriding
        - 부모 클래스의 속성이나 메서드를 자식 클래스에 물려주고 받는 것
        - is - a : 
            - 타입 일치 : 서브 클래스의 객체는 슈퍼 클래스의 타입으로 간주
            - 재사용성
            - 확장성 : 새로운 클래스를 쉽게 추기하여 기능 확장
            - 다형성 지원

            -추상 클래스 : 
                - 인스턴스를 직접 생성할 수 없는 클래스
                - abstract 키워드를 사용
                - 상속을 통해 서브 클래스에서 구체화해야 한다.

                - 특징 :
                    - 인스턴스 생성 불가 - 서브클래스에 정의 후 인스턴스화
                    - 상속 필요 : 서브 클래스는 모든 추상 메서드를 구현해야 함

                - 인터페이스 :
                    - implement로 지원
                    - 인터페이스는 추상 메서드의 집합, 구현해야 할 행동의
                    명세를 제공함
                    - 하나의 클래스가 여러 인터페이스를 구현 => 다중 구현
                        - 다중구현의 장점 : 유연성 / 결합도 감소 / 기능 확장 용이

    3. 다형성 :
        - 메서드나 객체가 다양한 방법으로 동작하는 성질
        - 한 객체가 여러 타입의 실체를 가질 수 있도록 해준다.
            => 재사용성과 유연성을 높힘
        - Overloading
            - 매개변수의 타입이나 개수가 다른 여러 메서드를 정의

    4. 추상화 :
        - 단순한 모델로 표현하는 것
            - 단순화
            - 재사용성 향상
            - 코드 분리
            - 유지보수 용이성


# SOLID
    - OOP와 설계를 효율적이고 유지보수가 가능하며, 확장성이 좋은
    소프트웨어를 만드는 데 도움을 주는 다섯 가지 기본 원칙

    - S : 단일 책임 원칙(Single Responsibility Principle)
        - 모든 클래스는 단 하나의 책임

    - O : 개방-폐쇄 원칙(Open-Closed Principle)
        - 확장에는 열려 있지만, 변경에는 닫혀 있어야 한다.
    
    - L : 리스코프 치환 원칙(Liskov Substitution Principle)
        - 기반 클래스에서 가능한 행동은 서브 클래스에서도 가능해야 한다.

    - I : 인터페이스 분리 원칙(Interface Segregation Principle)
        - 하나의 일반적인 인터페이스보다는, 여러 개의 구체적 인터페이스가 낫다.

    - D : 의존성 역전 원칙(Dependency Inversion Principle)
        - 모듈이 추상화에 의존

    
# 디자인 패턴
    디자인 패턴 :
        1. 생성 패턴 : 객체의 생성과 조합을 캡슐화하여 객체가 생성되거나
        조합되는 방식을 유연하게 함
        2. 구조 패턴 : 서로 다른 인터페이스나 구현을 가진 클래스들이 함께
        일할 수 있도록 함
        3. 행동 패턴 : 객체들이 서로 상호작용하는 방식과 책임을 분산하는
        방법을 제공함
        


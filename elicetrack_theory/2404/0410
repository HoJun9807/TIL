## elice cloudtrack - 0408 ##

# DB 기초
    DB 커넥션 --> 세션 --> SQL 실행
    Connection : 클라이언트를 사용해 DB 서버에 접근할 때 연결을 요청하고 Connection을 맺음
        => 애플리케이션과 DB 서버 간의 통신 채널 / CRUD 등의 작업 수행이 가능
    Session : Connection이 성공하면 Session을 생성 / 애플리케이션과 DB간의 상호작용을 관리
    Transaction : 세션 내에서 시작되며, 모든 연산이 성공되면 커밋되어 DB에 반영, 실패 시 롤백

    Transaction : 작업 단위로 수행되는 일련의 연산 / 커밋과 롤백
        원자성 : 하나의 단위 
        일관성 : 실행 전후로 데이터 속성의 동일 
        격리성 : 중간에 작업을 할 수 없다(옵션으로 가능하게 만들 수 도 있음) 
        지속성 : 영구적으로 DB에 저장
        
        - 격리 수준 : 
            동시성 : 여러 사용자나 트랜잭션이 DB에 동시 접근하여 작업을 수행할 수 있는 시스템의 
            능력을 의미한다.
            ANSI : 표준에 따른 트랜잭션 격리 수준은 DB 시스템에서 동시성 제어를 위해 정의한다.
                Read Uncommitted / Read Committed(*) / Repeatable  Read / Serializable 

        - Transaction Lock : 중요한 동시성 제어 메커니즘이다.
            자원에 대한 독점적 접근 보장 : 동시에 접근하는 것을 방지 / 일관성과 무결성 유지에 중요
            락의 유형 : Shared Lock : 동시에 읽기는 가능하지만 변경을 허용하지 않음
                       Exclusive Lock : 해당 자원을 독점적으로 읽고 쓸 수 있게 함
            데드락 : 두 개 이상의 트랜잭션이 서로의 락을 기다리는 상황이 발생하면 서로를 무한정 기다리는
            상태가 되어, 시스템이 정지될 수 있음을 정의
            락의 관리 : 락을 효율적으로 관리하기 위해 락 관리자를 사용한다.

        to Spring
            비즈니스 로직은 결국 Transaction / 성공하면 commit , 실패하면 rollback 으로 추상화
            동일한 Transaction = 동일한 DB Connection 

            스프링 트랜잭션 매니저 : 스프링의 선언적 트랜잭션 관리 기능
                DB 시스템 API에 대해 일관된 프로그래밍 모델을 제공

            트랜잭션 매니저의 주요 기능
                추상화 : 일관적인 접근 방식을 제공 
                선언적 관리 : @Transactional 사용 
                프로그래밍적 관리 : Transaction 매니저 API를 사용하여 시작, 커밋, 롤백을 제어
                동기화 : 모든 작업이 동일한 Transaction 컨텍스트를 공유

                매니저 방식
                    프로그래매틱 방식 : 성공하면 commit, 실패하면 rollback이 자동
                    선언적 @Transactional : Transaction 코드를 제외하고 비즈니스 로직만 사용
                                        : 가장 많이 사용됨 class에 붙이면 내부에 public에 적용
                        unchecked Exception : 복구 불가함으로 판단함
                        checked exception : commit

            Proxy 객체 : 객체로 부터의 모든 호출을 중간에 가로채어 추가적인 작업을 수행
                       : 실제 객체를 참조하여 대신 객체를 생성해줘서 인터페이스를 통해 노출 시킬 수 있다.

            Transaction AOP : application.properties파일의 Datasource
            Transaction Option : readOnly => 읽기 전용
                               : propagation => 하나의 트랜잭션 진행 중에 또 트랜잭션을 수행
                                    .REQUIRED : 모든 논리 트랜잭션이 커밋되어야 물리 트랜잭션이 커밋
                                    .REQUIRES_NEW : 이미 실행 중인 트랜잭션이 있다면, 해당 트랜잭션을 
                                    일시 정지시키고 새 트랜잭션을 시작함.
                                    




